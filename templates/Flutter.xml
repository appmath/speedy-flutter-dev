<templateSet group="Flutter">
  <template name="f_stless" value="class $NAME$ extends StatelessWidget {&#10;  const $NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_stful" value="class $NAME$ extends StatefulWidget {&#10;  const $NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  $SNAME$ createState() =&gt; $SNAME$();&#10;}&#10;&#10;class $SNAME$ extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SNAME" expression="regularExpression(concat(&quot;_&quot;, NAME, &quot;State&quot;), &quot;^__&quot;, &quot;_&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_inh" value="class $NAME$ extends InheritedWidget {&#10;  const $NAME$({&#10;    Key? key,&#10;    required Widget child,&#10;  }) : super(key: key, child: child);&#10;&#10;  static $NAME$ of(BuildContext context) {&#10;    final $NAME$? result = context.dependOnInheritedWidgetOfExactType&lt;$NAME$&gt;();&#10;    assert(result != null, 'No $NAME$ found in context');&#10;    return result!;&#10;  }&#10;&#10;  @override&#10;  bool updateShouldNotify($NAME$ old) {&#10;    return $SHOULD_NOTIFY$;&#10;  }&#10;}" description="New Inherited widget" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SHOULD_NOTIFY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_stanim" value="class $NAME$ extends StatefulWidget {&#10;  const $NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; with SingleTickerProviderStateMixin {&#10;  late AnimationController _controller;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _controller = AnimationController(vsync: this);&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _controller.dispose();&#10;    super.dispose();&#10;  }&#10;  &#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget with AnimationController" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_thof" value="Theme.of(context)" description="Create ThemeData from build context" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_ihof" value="$NAME$.of(context)" description="Create ThemeData from an InheritedWidget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_mdof" value="MediaQuery.of(context)" description="Create MediaQueryData from build context" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_removeDebug" value="debugShowCheckedModeBanner: false,&#10;" description="Removes the debug statement" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_scaffoldAppBar" value="// Probably need SafeArea()&#10;Scaffold(&#10;          appBar: AppBar(&#10;            title: const Text('$TEXT$'),&#10;            // backgroundColor: Colors.white,&#10;            &#10;      &#10;          ),&#10;          body: $BODY$,&#10;);" description="Create a Scaffold and AppBar" toReformat="true" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_colorARGB" value="// Color(0xFF090C22)&#10;// Alpha: 0xFF (opacity)&#10;// Red: 09&#10;// Green: 0C&#10;// Blue: 22&#10;" description="Description of the ARGB color" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_floatingActionButtonWithTheme" value="floatingActionButton: Theme(&#10;        data: ThemeData(accentColor: Colors.green),&#10;        child: FloatingActionButton(&#10;          onPressed: () {},&#10;          child: Icon(Icons.add),&#10;    ),&#10;)," description="Create FloatingActionButton with a Theme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_gapSizedBox" value="SizedBox(&#10;    height: $HEIGHT$,&#10;),&#10;" description="Sized Box to create a vertical gap" toReformat="false" toShortenFQNames="true">
    <variable name="HEIGHT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textWithSizeColor" value="Text($TEXT$,&#10;    textAlign: TextAlign.center,&#10;    style: TextStyle(&#10;        fontSize: $SIZE$,&#10;        color: $COLOR$,&#10;    ),&#10;),&#10;" description="Text with Size and Color" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SIZE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COLOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_text_textStyle" value="Text($TEXT$,&#10;    style: TextStyle(&#10;        fontSize: $SIZE$,&#10;        color: $COLOR$,&#10;        fontWeight: FontWeight.w600,&#10;    ),&#10;),&#10;" description="Text with Size, Color and Color" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SIZE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COLOR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_mainAxisAlignVsCrossAxisAlignment" value="// Main: for the longer axis&#10;//       column? Vertical.&#10;//       row? Horizontal.&#10;&#10;// Cross: for the shorter axis&#10;//        column? Horizontal.&#10;//        row? Vertical.&#10;" description="MainAxisLignment/CrossAxisLignment &quot;S&quot;plainer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_sliderSliderTheme" value="&#10;// int height&#10; SliderTheme(&#10;                        data: SliderTheme.of(context).copyWith(&#10;                          activeTrackColor: Colors.white,&#10;                          inactiveTrackColor: Color(0xFF8D8E98),&#10;                          thumbColor: Color(0xFFEB1555),&#10;                          overlayColor: Color(0x29EB1555),&#10;                          thumbShape:&#10;                              RoundSliderThumbShape(enabledThumbRadius: 15.0),&#10;                          overlayShape:&#10;                              RoundSliderOverlayShape(overlayRadius: 30.0),&#10;                        ),&#10;                        child: Slider(&#10;                          value: height,&#10;                          onChanged: (newHeight) {&#10;                            setState(() =&gt; height =&#10;                                double.parse(newHeight.toStringAsFixed(2)));&#10;                          },&#10;                          min: 4.0,&#10;                          max: 7.0,&#10;                        ),&#10;                      )," description="Sider with a Slider Theme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_roundedIconButton" value="class RoundIconButton extends StatelessWidget {&#10;  final IconData icon;&#10;&#10;  RoundIconButton({required this.icon});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return RawMaterialButton(&#10;      child: Icon(icon),&#10;      elevation: 6.0,&#10;      constraints: BoxConstraints.tightFor(&#10;        width: 56.0,&#10;        height: 56.0,&#10;      ),&#10;      shape: CircleBorder(),&#10;      fillColor: Color(0xFF4E4F5E),&#10;      onPressed: () {},&#10;    );&#10;  }&#10;}" description="RoundedIconButton" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_nav_push" value="Navigator.push(&#10;                  context,&#10;                  MaterialPageRoute(&#10;                    builder: (context) =&gt; $SCREEN_NAME_2$(),&#10;                  ),&#10;);" description="Push to a route" toReformat="false" toShortenFQNames="true">
    <variable name="SCREEN_NAME_2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_addRoutes" value="// Inside each class:&#10;// NOTE IN SOME INSTANCES forward slash is required: initialRoute: '/',&#10;initialRoute: $SCREEN_NAME$.routeName,&#10;      routes: {&#10;        $SCREEN_NAME_2$.routeName: (context) =&gt; $SCREEN_NAME_2$(),&#10;}," description="Define routes inside Material App" toReformat="false" toShortenFQNames="true">
    <variable name="SCREEN_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SCREEN_NAME_2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_pushNamed" value="Navigator.pushNamed(context, $NAME$.routeName);" description="Push to a named route" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_moveToBottomOfColumn" value="// Assumes that MainAxisAlignment is evenly spaced&#10;Expanded(&#10;  child: Align(&#10;    alignment: FractionalOffset.bottomCenter,&#10;      child: Padding(&#10;        padding: EdgeInsets.only(bottom: 10.0),&#10;          child: //Your widget here,&#10;    ),&#10;  ),&#10;)," description="Move last element of a column to the bottom (assumes that it's evenly spaced)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_callback_callbackVoid" value="final VoidCallback $NAME$" description="VoidCallback" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_nav_pop" value="Navigator.pop(context);" description="Pop the current screen" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textField_hintText_icon_border" value="TextField(&#10;                  style: TextStyle(&#10;                    color: Colors.black,&#10;                  ),&#10;                  decoration: InputDecoration(&#10;                      filled: true,&#10;                      fillColor: Colors.white,&#10;                      hintText: 'Enter City Name',&#10;                      hintStyle: TextStyle(&#10;                        color: Colors.grey,&#10;                      ),&#10;                      icon: Icon(&#10;                        Icons.location_city,&#10;                        color: Colors.white,&#10;                      ),&#10;                      border: OutlineInputBorder(&#10;                        borderRadius: BorderRadius.all(&#10;                          Radius.circular(10.0),&#10;                        ),&#10;                        borderSide: BorderSide.none,&#10;                      )),&#10;                )," description="Extensive TextField example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_super_initState" value="@override&#10;void initState() {&#10;   super.initState();&#10;   $END$&#10;}" description="initState function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="f_widget_passwordTextField" value="// Need email type, just  remove obscureText and add:&#10;// keyboardType: TextInputType.emailAddress,&#10;TextField(&#10;  textAlign: TextAlign.center,&#10;  obscureText: true,&#10;  onChanged: (value) {&#10;    password = value;&#10;  },&#10;  decoration: kTextFieldDecoration.copyWith(&#10;      hintText: 'Enter your password'),&#10;),&#10;    &#10;    //////////////////////&#10;  &#10;const kTextFieldDecoration = InputDecoration(&#10;  hintText: 'Enter your email',&#10;  contentPadding: EdgeInsets.symmetric(vertical: 10.0, horizontal: 20.0),&#10;  border: OutlineInputBorder(&#10;    borderRadius: BorderRadius.all(Radius.circular(32.0)),&#10;  ),&#10;  enabledBorder: OutlineInputBorder(&#10;    borderSide: BorderSide(color: Colors.lightBlueAccent, width: 1.0),&#10;    borderRadius: BorderRadius.all(Radius.circular(32.0)),&#10;  ),&#10;  focusedBorder: OutlineInputBorder(&#10;    borderSide: BorderSide(color: Colors.lightBlueAccent, width: 2.0),&#10;    borderRadius: BorderRadius.all(Radius.circular(32.0)),&#10;  ),&#10;);&#10;          &#10;            " description="Textfield with passwords and some nice styling" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_roundedButton" value="import 'package:flutter/material.dart';&#10;&#10;class RoundedButton extends StatelessWidget {&#10;  final Color color;&#10;  final String title;&#10;  final VoidCallback onPressed;&#10;&#10;  RoundedButton(&#10;      {required this.color, required this.title, required this.onPressed});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Padding(&#10;      padding: EdgeInsets.symmetric(vertical: 16.0),&#10;      child: Material(&#10;        elevation: 5.0,&#10;        color: color,&#10;        borderRadius: const BorderRadius.circular(30.0),&#10;        child: MaterialButton(&#10;          onPressed: onPressed,&#10;          minWidth: 200.0,&#10;          height: 42.0,&#10;          child: Text(&#10;            title,&#10;            style: const TextStyle(&#10;              color: Colors.white,&#10;            ),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="RoundedButton" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_messageBubble" value="class MessageBubble extends StatelessWidget {&#10;  final String sender;&#10;  final String text;&#10;  final bool isMe;&#10;&#10;  MessageBubble({required this.sender, required this.text, required this.isMe});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Padding(&#10;      padding: const EdgeInsets.all(10.0),&#10;      child: Column(&#10;        crossAxisAlignment:&#10;            isMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,&#10;        children: [&#10;          Text(&#10;            sender,&#10;            style: TextStyle(color: Colors.black54, fontSize: 12.0),&#10;          ),&#10;          Material(&#10;            borderRadius: isMe&#10;                ? BorderRadius.only(&#10;                    topLeft: Radius.circular(30.0),&#10;                    bottomLeft: Radius.circular(30.0),&#10;                    bottomRight: Radius.circular(30.0),&#10;                  )&#10;                : BorderRadius.only(&#10;                    topRight: Radius.circular(30.0),&#10;                    bottomLeft: Radius.circular(30.0),&#10;                    bottomRight: Radius.circular(30.0),&#10;                  ),&#10;            elevation: 5.0,&#10;            color: isMe ? Colors.lightBlueAccent : Colors.white54,&#10;            child: Padding(&#10;              padding:&#10;                  const EdgeInsets.symmetric(vertical: 10.0, horizontal: 20),&#10;              child: Text(&#10;                text,&#10;                style: TextStyle(&#10;                  color: isMe ? Colors.white : Colors.black,&#10;                  fontSize: 15.0,&#10;                ),&#10;              ),&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}&#10;&#10;" description="Message bubble with 3 rounded corners and a square one" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_initForProject" value="import 'package:firebase_core/firebase_core.dart';&#10;&#10;void main() {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  Firebase.initializeApp().whenComplete(() {&#10;    print('Firebase is initialized');&#10;    runApp(FlashChat());&#10;  });&#10;}" description="Initialize firebase at the start of a project" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_firestore_instance" value="import 'package:cloud_firestore/cloud_firestore.dart';&#10;&#10;final _firestore = FirebaseFirestore.instance;&#10;" description="Get a firebase instance" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_firestore_signinWithEmailAndPwd" value="final _auth = FirebaseAuth.instance;&#10;UserCredential user = await _auth.signInWithEmailAndPassword(&#10;                              email: email, password: password);&#10;&#10;// Example there is a template for the button: t_roundedButton&#10;//                      RoundedButton(&#10;//                            color: Colors.lightBlueAccent,&#10;//                            title: 'Log In',&#10;//                            onPressed: () async {&#10;//                              try {&#10;//                                print('Email: $email');&#10;//                                print('Password: $password');&#10;//&#10;//                                UserCredential user =&#10;//                                    await _auth.signInWithEmailAndPassword(&#10;//                                        email: email, password: password);&#10;//                                print('User: $user');&#10;//                                Navigator.pushNamed(context, ChatScreen.id);&#10;//                                setState(() {&#10;//                                  showSpinner = false;&#10;//                                });&#10;//                              } catch (e) {&#10;//                                setState(() {&#10;//                                  showSpinner = false;&#10;//                                });&#10;//                                print(e);&#10;//                              }&#10;//                            })" description="Sign in using email and pwd" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_createUserWithEmailAndPwd" value="import 'package:firebase_auth/firebase_auth.dart';&#10;&#10;await _auth.createUserWithEmailAndPassword(&#10;                        email: email, password: password);&#10;&#10;// Example there is a template for the button: t_roundedButton&#10;//               RoundedButton(&#10;//                   color: Colors.lightBlueAccent,&#10;//                   title: 'Register',&#10;//                   onPressed: () async {&#10;//                     // print('Email: $email');&#10;//                     // print('Password: $password');&#10;//                     setState(() {&#10;//                       showSpinner = true;&#10;//                     });&#10;//                     try {&#10;//                       final newUser = await _auth.createUserWithEmailAndPassword(&#10;//                           email: email, password: password);&#10;//                       setState(() {&#10;//                         showSpinner = false;&#10;//                       });&#10;//                       Navigator.pushNamed(context, ChatScreen.id);&#10;//                     } catch (e) {&#10;//                       setState(() {&#10;//                         showSpinner = false;&#10;//                       });&#10;//                       print(e);&#10;//                     }&#10;//                   },&#10;//                 )&#10;" description="Create user with email and pwd" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_firestore_readDataUsingStreamBuilder" value="import 'package:firebase_auth/firebase_auth.dart';&#10;import 'package:cloud_firestore/cloud_firestore.dart';&#10;&#10;// To get the currentUser:&#10;// late User loggedInUser;&#10;//   void getCurrentUser() {&#10;//       try {&#10;//         final User? user = _auth.currentUser;&#10;//         if (user != null) {&#10;//           loggedInUser = user;&#10;//           print('{loggedInUser.email}: ${loggedInUser.email}');&#10;//         }&#10;//       } catch (e) {&#10;//         print(e);&#10;//       }&#10;//     }&#10;&#10;final _firestore = FirebaseFirestore.instance;&#10;late User loggedInUser;&#10;&#10;final _auth = FirebaseAuth.instance;&#10;&#10;class MessageStream extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return StreamBuilder(&#10;        stream: _firestore.collection('messages').snapshots(),&#10;        builder: (BuildContext context, AsyncSnapshot&lt;QuerySnapshot&gt; snapshot) {&#10;          if (!snapshot.hasData) {&#10;            return const Center(&#10;              child: CircularProgressIndicator(&#10;                backgroundColor: Colors.lightBlueAccent,&#10;              ),&#10;            );&#10;          }&#10;          final List&lt;MessageBubble&gt; list =&#10;              snapshot.data!.docs.reversed.map((message) {&#10;            var text = message['text'];&#10;            var sender = message['sender'];&#10;            bool isMe = false;&#10;            if (loggedInUser != null) {&#10;              final currentUser = loggedInUser.email;&#10;              isMe = currentUser == sender;&#10;            }&#10;&#10;            var messageBubble =&#10;                MessageBubble(text: text, sender: sender, isMe: isMe);&#10;            return messageBubble;&#10;          }).toList();&#10;&#10;          return Expanded(&#10;            child: ListView(&#10;              // TODO fix issue with reverse.&#10;              reverse: true,&#10;              padding:&#10;                  const EdgeInsets.symmetric(horizontal: 10.0, vertical: 20.0),&#10;              children: list,&#10;            ),&#10;          );&#10;        });&#10;  }&#10;}" description="Use StreamBuilder to read data" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_firestore_postData" value="import 'package:cloud_firestore/cloud_firestore.dart';&#10;&#10;final _firestore = FirebaseFirestore.instance;&#10;&#10;_firestore.collection('messages').add(&#10;                          {'text': messageText, 'sender': loggedInUser.email});&#10;" description="Use StreamBuilder to read data" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_getCurrentUser" value="import 'package:firebase_auth/firebase_auth.dart';&#10;&#10;final _auth = FirebaseAuth.instance;&#10;&#10; late User loggedInUser;&#10;&#10;   void getCurrentUser() {&#10;       try {&#10;         final User? user = _auth.currentUser;&#10;         if (user != null) {&#10;           loggedInUser = user;&#10;           print('{loggedInUser.email}: ${loggedInUser.email}');&#10;         }&#10;       } catch (e) {&#10;         print(e);&#10;       }&#10;     }" description="Get current firestone user" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_borderRadius" value="borderRadius: BorderRadius.only(&#10;     topLeft: Radius.circular($TOP_LEFT$),&#10;     topRight: Radius.circular($TOP_RIGHT$),&#10;),&#10;" description="Border radius with top rounded corners and square bottom corners" toReformat="false" toShortenFQNames="true">
    <variable name="TOP_LEFT" expression="" defaultValue="30.0" alwaysStopAt="true" />
    <variable name="TOP_RIGHT" expression="" defaultValue="30.0" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_containerRoundedCorners" value="// Rounded corners at the top&#10;Container(&#10;                height: 300.0,&#10;                decoration: BoxDecoration(&#10;                  color: Colors.white,&#10;                  borderRadius: BorderRadius.only(&#10;                    topLeft: Radius.circular(30.0),&#10;                    topRight: Radius.circular(30.0),&#10;                  ),&#10;                ),&#10;)" description="Container with rounded top corners" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_color_hex_first_remove_#" value="Color(0xff$HEX$)," description="Adds a color that uses hex" toReformat="false" toShortenFQNames="true">
    <variable name="HEX" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_containerRoundedCornersBlendsWithBackground" value="// Container 1: blends with background (Color(xxxxx)&#10;// Container 2: rounded corners at the top&#10;        Container(&#10;      color: Color(0xff757575),&#10;      child: Container(&#10;        decoration: BoxDecoration(&#10;          color: Colors.white,&#10;          borderRadius: BorderRadius.only(&#10;            topLeft: Radius.circular(30.0),&#10;            topRight: Radius.circular(30.0),&#10;          ),&#10;        ),&#10;      ),&#10;    );" description="Two containers first one blends with the background the second one has the rounded corners" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_floatingActionButtonAndModalBottomSheet" value="floatingActionButton: FloatingActionButton(&#10;            backgroundColor: Colors.lightBlueAccent,&#10;            child: Icon(Icons.add),&#10;            onPressed: () {&#10;              showModalBottomSheet(&#10;              // To prevent the keyboard from &#10;                  isScrollControlled: true,&#10;                  context: context,&#10;                  // ModalScreen&#10;                  builder: (context) =&gt; AddTasksScreen() &#10;                  &#10;                  &#10;                  );&#10;            }),&#10;            &#10;            // import 'package:flutter/material.dart';&#10;// &#10;// class AddTasksScreen extends StatelessWidget {&#10;//   @override&#10;//   Widget build(BuildContext context) {&#10;//     final theme = Theme.of(context);&#10;//     return // Rounded corners at the top&#10;//         Container(&#10;//       color: Color(0xff757575),&#10;//       child: Container(&#10;//         child: Padding(&#10;//           padding: const EdgeInsets.all(50.0),&#10;//           child: Column(&#10;//             crossAxisAlignment: CrossAxisAlignment.center,&#10;//             children: [&#10;//               const Text(&#10;//                 'Add Task',&#10;//                 style: TextStyle(&#10;//                   color: Colors.lightBlueAccent,&#10;//                   fontSize: 35.0,&#10;//                   fontWeight: FontWeight.w500,&#10;//                 ),&#10;//               ),&#10;//               const SizedBox(&#10;//                 height: 10.0,&#10;//               ),&#10;//               Theme(&#10;//                 data: theme.copyWith(primaryColor: Colors.lightBlueAccent),&#10;//                 child: TextField(&#10;//                   autofocus: true,&#10;//                   style: const TextStyle(&#10;//                     color: Colors.lightBlueAccent,&#10;//                   ),&#10;//                   decoration: InputDecoration(&#10;//                     labelStyle: theme.textTheme.caption!&#10;//                         .copyWith(color: theme.primaryColor),&#10;//                     enabledBorder: const UnderlineInputBorder(&#10;//                       borderSide:&#10;//                           BorderSide(color: Colors.lightBlueAccent, width: 5.0),&#10;//                     ),&#10;//                     focusedBorder: const UnderlineInputBorder(&#10;//                       borderSide:&#10;//                           BorderSide(color: Colors.lightBlueAccent, width: 5.0),&#10;//                     ),&#10;//                   ),&#10;//                 ),&#10;//               ),&#10;//               const SizedBox(&#10;//                 height: 30.0,&#10;//               ),&#10;//               MaterialButton(&#10;//                 color: Colors.lightBlueAccent,&#10;//                 onPressed: () {},&#10;//                 minWidth: double.infinity,&#10;//                 height: 50.0,&#10;//                 child: const Text(&#10;//                   'Add',&#10;//                   style: TextStyle(&#10;//                     fontSize: 20.0,&#10;//                     color: Colors.white,&#10;//                   ),&#10;//                 ),&#10;//               ),&#10;//             ],&#10;//           ),&#10;//         ),&#10;//         decoration: const BoxDecoration(&#10;//           color: Colors.white,&#10;//           borderRadius: BorderRadius.only(&#10;//             topLeft: Radius.circular(30.0),&#10;//             topRight: Radius.circular(30.0),&#10;//           ),&#10;//         ),&#10;//       ),&#10;//     );&#10;//   }&#10;// }" description="Floating action button and modal bottom sheet" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_modalBottomSheet" value="floatingActionButton: FloatingActionButton(&#10;            backgroundColor: Colors.lightBlueAccent,&#10;            child: Icon(Icons.add),&#10;            onPressed: () {&#10;              showModalBottomSheet(&#10;                  isScrollControlled: true,&#10;                  context: context,&#10;                  builder: (context) =&gt; AddTasksScreen());&#10;            })," description="Modal bottom sheet" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_callback_valueChanged" value="  final ValueChanged&lt;$TYPE$&gt; $NAME$;&#10;" description="ValueChangedCallback" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_provider_consumer" value="// Note that child might be tied to the main widget, it doesn't get updated&#10; Consumer&lt;$NAME$&gt;(&#10;            builder: (BuildContext context, $NAME_LC$, Widget? child) =&gt;&#10; $WIDGET$,&#10;)," description="Define a consumer" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LC" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_provider_1_create_changeNotifier" value="import 'dart:collection';&#10;&#10;import 'package:flutter/foundation.dart';&#10;import 'package:todoey/models/task.dart';&#10;&#10;class TaskData extends ChangeNotifier {&#10;  List&lt;Task&gt; _tasks = [&#10;    Task(name: 'Buy milk', isDone: true),&#10;    Task(name: 'Buy eggs', isDone: false),&#10;    Task(name: 'Buy bread', isDone: true),&#10;  ];&#10;&#10;  void addNewTask(Task task) {&#10;    _tasks.insert(0, task);&#10;    notifyListeners();&#10;  }&#10;&#10;  int get taskCount {&#10;    return _tasks.length;&#10;  }&#10;&#10;  UnmodifiableListView&lt;Task&gt; get tasks {&#10;    return UnmodifiableListView(_tasks);&#10;  }&#10;&#10;  void updateTask(Task task) {&#10;    task.toggleDone();&#10;    notifyListeners();&#10;  }&#10;&#10;  void removeTask(Task task) {&#10;    _tasks.remove(task);&#10;    notifyListeners();&#10;  }&#10;}&#10;" description="Define a data class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_provider_2_register_changeNotifierProvider" value="// Rebuilds only the widgets that are listening&#10;ChangeNotifierProvider(&#10;      create: (ctx) =&gt; $CHANGE_LISTNER$,&#10;      child: MaterialApp(&#10;        home: $SCREEN_CLASS$,&#10;      ),&#10;);" description="Starting point: define a ChangNotifierProvider in main.dart" toReformat="true" toShortenFQNames="true">
    <variable name="CHANGE_LISTNER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SCREEN_CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_passFunctionPointer" value="// Passing buy() will force the immediate execution of the function&#10;// Passing buy is a pointer that will ONLY get executed when the button is pressed&#10;// &#10;// onPressed: buy&#10;//&#10;//  void buy() {&#10;//    print('Pressed');&#10;//  }&#10;//&#10;// On the other hand, be careful with fat arrow/anonymous functions, they expect a function and NOT the pointer&#10;//  onSubmitted: (_) =&gt; _submitData(),&#10;// Note that (_) the underscore is a way to say that we don't care about the argument" description="Pass the name (pointer) of the function not the result" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_button_elevatedButton_icon_raisedButton" value="ElevatedButton.icon(&#10;  style: ElevatedButton.styleFrom(&#10;      //primary: Theme.of(context).colorScheme.primary&#10;      primary: Theme.of(context).colorScheme.secondary),&#10;&#10;  label: const Text('$TEXT$'),&#10;  icon: const Icon(Icons.$ICON_NAME$),&#10;  onPressed: () {},&#10;)" description="ElevatedButton is the replacement for RaisedButton" toReformat="true" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ICON_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_buttonMigration" value="// https://flutter.dev/docs/release/breaking-changes/buttons&#10;/*&#10;Old Widget      |&#9;Old Theme   |&#9;New Widget&#9;   | New Theme&#10;----------------------------------------------------------------------&#10;FlatButton&#9;    | ButtonTheme&#9;| TextButton&#9;   | TextButtonTheme&#10;RaisedButton&#9;| ButtonTheme&#9;| ElevatedButton   | ElevatedButtonTheme&#10;OutlineButton&#9;| ButtonTheme&#9;| OutlinedButton   | OutlinedButtonTheme&#10; */" description="Button migration info" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_textButton" value="TextButton(&#10;  style: ButtonStyle(&#10;    foregroundColor: MaterialStateProperty.all&lt;Color&gt;(Colors.blue),&#10;  ),&#10;  onPressed: () { },&#10;  child: Text('TextButton'),&#10;)" description="Simple TextButton" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textButtonHoveredFocusPressedState" value="TextButton(&#10;  style: ButtonStyle(&#10;    foregroundColor: MaterialStateProperty.all&lt;Color&gt;(Colors.blue),&#10;    overlayColor: MaterialStateProperty.resolveWith&lt;Color&gt;(&#10;      (Set&lt;MaterialState&gt; states) {&#10;        if (states.contains(MaterialState.hovered))&#10;          return Colors.blue.withOpacity(0.04);&#10;        if (states.contains(MaterialState.focused) ||&#10;            states.contains(MaterialState.pressed))&#10;          return Colors.blue.withOpacity(0.12);&#10;        return null; // Defer to the widget's default.&#10;      },&#10;    ),&#10;  ),&#10;  onPressed: () { },&#10;  child: Text('TextButton')&#10;)&#10;" description="Complex TextButton with multiple states" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textButtonFocusOverride" value="TextButton(&#10;  style: ButtonStyle(&#10;    overlayColor: MaterialStateProperty.resolveWith&lt;Color&gt;(&#10;      (Set&lt;MaterialState&gt; states) {&#10;        if (states.contains(MaterialState.focused))&#10;          return Colors.red;&#10;        return null; // Defer to the widget's default.&#10;      }&#10;    ),&#10;  ),&#10;  onPressed: () { },&#10;  child: Text('TextButton'),&#10;)&#10;" description="TextButton example with an override that can be used for other properties" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_callback_function" value="// ------ Function&#10;//   void _addNewTransaction(String title, double amount) {&#10;//     print('title: $title, amount: $amount');&#10;// &#10;//     final newTx = Transaction(&#10;//         id: DateTime.now().toString(),&#10;//         title: title,&#10;//         amount: amount,&#10;//         date: DateTime.now());&#10;//     setState(() {&#10;//       _userTransactions.add(newTx);&#10;//     });&#10;//   }&#10;&#10;&#10;// ------ Consumer &#10;// TransactionList(userTransactions: _userTransactions)&#10;&#10;// ------ Consumer setup&#10;// final Function newTransactionHandler;&#10;// NewTransaction({required this.newTransactionHandler});&#10;&#10;//  onPressed: () {&#10;//    var amount = 0.0;&#10;//    try {&#10;//      amount = double.parse(amountController.text);&#10;//    } catch (e) {&#10;//      print(e);&#10;//    }&#10;//    newTransactionHandler(titleController.text, amount);&#10;//    print('TitleInput: ${titleController.text}');&#10;//    print('AmountInput: ${amountController.text}');&#10;//  }," description="Function with two arguments" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_useSingleChildScrollView" value="// Wrap whatever widget needs scrolling&#10;// Keep in mind that you might need a container to limit the size of the widget&#10;// Remember that the keyboard needs some space&#10;Container(&#10;      height: 300,&#10;      child: SingleChildScrollView(&#10;        child: Column(&#10;          children:  []             &#10;        ),&#10;      ),&#10;    );&#10;" description="Scrolling" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_listViewShouldBeInsideContainer" value="Container(&#10;      height: 300,&#10;      child: ListView(&#10;        children: []           &#10;      ),&#10;    );" description="ListView has infinite height and should be given some size" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_listViewUseListView.builder" value="// ListView.builder only loads what's visible" description="ListView.builder is more efficient" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_comp_listView.builderAndListTile" value="// DON'T FORGET TO SPECIFY THE itemCount!!!!&#10;ListView.builder(&#10;          itemBuilder: (context, index) {&#10;            var task = taskData.tasks[index];&#10;            return TaskTile(&#10;              task: task,&#10;              checkboxCallback: (bool? checkboxState) {&#10;                taskData.updateTask(task);&#10;              },&#10;              longPressCallback: () =&gt; showDialog&lt;String&gt;(&#10;                context: context,&#10;                builder: (BuildContext context) =&gt; AlertDialog(&#10;                  title: const Text('Delete task'),&#10;                  content: Text('Delete ${task.name}?'),&#10;                  actions: [&#10;                    TextButton(&#10;                      onPressed: () =&gt; Navigator.pop(context, 'Cancel'),&#10;                      child: const Text('Cancel'),&#10;                    ),&#10;                    TextButton(&#10;                      onPressed: () =&gt; {&#10;                        Provider.of&lt;TaskData&gt;(context, listen: false)&#10;                            .removeTask(task),&#10;                        Navigator.pop(context, 'OK')&#10;                      },&#10;                      child: const Text('OK'),&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;            );&#10;          },&#10;          itemCount: taskData.taskCount,&#10;        );&#10;        &#10; // --------------------------------------------------------&#10; import 'package:flutter/cupertino.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:todoey/models/task.dart';&#10;import 'package:todoey/notifiers/task_data.dart';&#10;&#10;class TaskTile extends StatelessWidget {&#10;  final Task task;&#10;&#10;  final ValueChanged&lt;bool?&gt; checkboxCallback;&#10;  final VoidCallback longPressCallback;&#10;&#10;  TaskTile(&#10;      {required this.task,&#10;      required this.checkboxCallback,&#10;      required this.longPressCallback});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final bool isChecked = task.isDone;&#10;    final String taskTitle = task.name;&#10;    return ListTile(&#10;      onLongPress: longPressCallback,&#10;      title: Text(&#10;        taskTitle,&#10;        style: TextStyle(&#10;          decoration: isChecked ? TextDecoration.lineThrough : null,&#10;        ),&#10;      ),&#10;      trailing: Checkbox(&#10;        activeColor: Colors.lightBlueAccent,&#10;        value: isChecked,&#10;        onChanged: checkboxCallback,&#10;      ),&#10;    );&#10;  }&#10;}&#10;       " description="ListView.builder and a CUSTOM ListTitle" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_callback_unused_arg" value="onSubmitted: (_) =&gt; submitData" description="Convention for signaling an unused argument" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_floatingActionButtonBasicWithLocation" value="floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,&#10;floatingActionButton: FloatingActionButton(&#10;  child: Icon(Icons.add, color: Colors.white),&#10;  onPressed: () {},&#10;)," description="Create FloatingActionButton with a Location" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_gestureDetector" value="GestureDetector(&#10;  child: $CHILD$,&#10;  // If animation is inside Container: HitTestBehavior.translucent&#10;  behavior: HitTestBehavior.opaque,&#10;  &#10;    onTap: () {},&#10;&#10;),&#10;                           &#10;" description="Gesture detector" toReformat="false" toShortenFQNames="true">
    <variable name="CHILD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_modalBottomDismissedWithGestureDetector" value=" void _startAddNewTransaction(BuildContext context) {&#10;    showModalBottomSheet(&#10;        context: context,&#10;        builder: (_) {&#10;          return GestureDetector(&#10;            onTap: () {},&#10;            child: NewTransaction(newTransactionHandler: _addNewTransaction),&#10;            behavior: HitTestBehavior.opaque,&#10;          );&#10;        });&#10;  }" description="GestureDetector takes care of dismissing the bottom sheet" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_theme_themeData" value="// WARNING: you can set accentSwatch!&#10;// ----- Declare it&#10;// MaterialApp(&#10;//   theme: ThemeData(&#10;//     primarySwatch: Colors.blueGrey,&#10;//   ),&#10;//   title: 'Personal Expenses',&#10;//   home: MyHomePage(),&#10;// );&#10;&#10;// ----- Use it&#10;//  child: Text(&#10;//    'some text',&#10;//    style: TextStyle(&#10;//        fontWeight: FontWeight.bold,&#10;//        fontSize: 20,&#10;//        color: Theme.of(context).primaryColor),&#10;//  )," description="How to set themeData and use it" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_themeDataCopyWithSecondary" value="var theme = ThemeData(&#10;      primarySwatch: Colors.blueGrey,&#10;    );&#10;    return MaterialApp(&#10;      theme: theme.copyWith(&#10;        colorScheme:&#10;            theme.colorScheme.copyWith(secondary: Colors.lightBlueAccent),&#10;      ),&#10;      title: 'Personal Expenses',&#10;      home: MyHomePage(),&#10;    );" description="How to use ThemeDataCopyWith" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_itar" value="for (var $INDEX$ = 0; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) {&#10;  var $VAR$ = $ARRAY$[$INDEX$];&#10;  $END$&#10;}" description="Iterate elements of array" toReformat="false" toShortenFQNames="true">
    <variable name="INDEX" expression="jsSuggestIndexName()" defaultValue="&quot;i&quot;" alwaysStopAt="true" />
    <variable name="ARRAY" expression="jsArrayVariable()" defaultValue="&quot;array&quot;" alwaysStopAt="true" />
    <variable name="VAR" expression="jsSuggestVariableName()" defaultValue="&quot;o&quot;" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_usePaddingVsContainer" value="Padding(&#10;    padding: EdgeInsets.all(10)&#10;    child: $CHIL$()&#10;)," description="If you only need just padding and nothing else" toReformat="false" toShortenFQNames="true">
    <variable name="CHIL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_flexible" value="Row(&#10;  mainAxisAlignment: MainAxisAlignment.spaceAround,&#10;  children: [&#10;    Flexible(&#10;      fit: FlexFit.tight,     // Takes as much as it can &#10;      fit: FlexFit.loose,     // Takes as LITTLE space as it can, so much so that it shows white &#10;                              // space that indicate how much more space it would take if it were &quot;tight&quot;&#10;      child: Container(&#10;        height: 100,&#10;        child: Text('Item 1'),&#10;        color: Colors.red,&#10;      ),&#10;    ),&#10;    Flexible(&#10;      flex: 2,           // Takes twice as much space as the others.&#10;      fit: FlexFit.tight,&#10;      child: Container(&#10;        height: 100,&#10;        child: Text('Item 2'),&#10;        color: Colors.blue,&#10;      ),&#10;    ),&#10;    Flexible(&#10;      fit: FlexFit.tight,&#10;      child: Container(&#10;        height: 100,&#10;        child: Text('Item 3'),&#10;        color: Colors.orange,&#10;      ),&#10;    ),&#10;  ],&#10; , " description="Sizing widgets" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_expanded_basic" value="Expanded(&#10;    flex: 4, // any number that makes sense&#10;    child: &#10;) &#10;// == Flexible(&#10;//      fit: FlexFit.tight,  &#10;//      child: &#10;//    )" description="Equivalent to Flexible with fit: FlexFit.tight" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_fittedBox" value=" FittedBox(&#10;    child: Image.network(&#10;        'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg'),&#10;    fit: BoxFit.fill,&#10;)," description="Scales and positions its child within itself according to fit" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_container" value="Container(&#10;    height: 0.0,&#10;    width: 0.0,&#10;),    " description="If a widget like a Row needs a height or width" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_padding" value="Padding(&#10;    padding: const EdgeInsets.all(8.0),&#10;),    " description="Defanged container" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_format_date" value="// https://pub.dev/packages/intl&#10;// Install it first: flutter pub add intl&#10;Text(DateFormat.yMMMd().format(tx.date))" description="Format a date using Intl package" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_listViewSize" value="// ListView has an infinite height!" description="ListView has an infinite height!!!!" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_sizing_device_size_height_width" value="  // Callers&#10;  // Container(&#10;  //     height: resizeHeight(context, appBar, 0.4),&#10;  //     child: Chart(recentTransactions: _recentTransactions)),&#10;  // Container(&#10;  //   height: resizeHeight(context, appBar, 0.6),&#10;  //   child: TransactionList(&#10;  //       transactions: _userTransactions,&#10;  //       deleteTransactionHandler: _deleteTransaction),&#10;  // ),&#10;  double resizeHeight(BuildContext context, AppBar appBar, double ratio) {&#10;    return MediaQuery.of(context).size.height * ratio -&#10;        // Subtract appBar&#10;        appBar.preferredSize.height -&#10;        // Subtract status bar &#10;        MediaQuery.of(context).padding.top;&#10;  }" description="How to get a device size" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_sizing_device_textScaleFactor" value="final curScaleFactor = MediaQuery.of(context).textScaleFactor&#10;&#10;// Used this way&#10;Text('This changes!', style: TextStyle(fontSize: 20 * curScaleFactor));" description="How to get a device textScaleFactor" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_sizing_layoutBuilder" value="  // See udemy/flutter-dart-complete-guide/personal_expenses&#10;  &#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return LayoutBuilder(&#10;      builder: (ctx, constraints) {&#10;        return Column(&#10;          children: [&#10;            Container(&#10;              height: constraints.maxHeight * 0.15,&#10;              child: FittedBox(&#10;                child: Text('\$${spendingAmount.toStringAsFixed(0)}'),&#10;              ),&#10;            ),&#10;            SizedBox(&#10;              height: constraints.maxHeight * 0.05,&#10;            ),&#10;            Container(&#10;              height: constraints.maxHeight * 0.6,&#10;              width: 10,&#10;              child: Stack(&#10;                children: [&#10;                  Container(&#10;                    decoration: BoxDecoration(&#10;                      border: Border.all(color: Colors.grey, width: 1.0),&#10;                      color: Color.fromRGBO(220, 220, 220, 1),&#10;                      borderRadius: BorderRadius.circular(10),&#10;                    ),&#10;                  ),&#10;                  FractionallySizedBox(&#10;                    heightFactor: spendingPctOfTotal,&#10;                    child: Container(&#10;                      decoration: BoxDecoration(&#10;                        color: Theme.of(context).primaryColor,&#10;                        borderRadius: BorderRadius.circular(10),&#10;                      ),&#10;                    ),&#10;                  )&#10;                ],&#10;              ),&#10;            ),&#10;            SizedBox(&#10;              height: constraints.maxHeight * 0.05,&#10;            ),&#10;            Container(&#10;                height: constraints.maxHeight * 0.15,&#10;                child: FittedBox(child: Text(label))),&#10;          ],&#10;        );&#10;      },&#10;    );&#10;  }&#10;" description="Use LayoutBuilder's constraints to determine the appropriate size" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_orientation_portrait" value="// Sets portrait orientation &#10;&#10;void main() {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  SystemChrome.setPreferredOrientations([&#10;  DeviceOrientation.portraitUp, &#10;  DeviceOrientation.portraitDown&#10;  ]);&#10;  runApp(MyApp());&#10;}&#10;" description="How to force portrait mode" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_orientation_landscape" value="// Set landscape orientation&#10;&#10;void main() {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  SystemChrome.setPreferredOrientations([&#10;  DeviceOrientation.landscapeLeft,&#10;  DeviceOrientation.landscapeRight,&#10;]);&#10;  runApp(MyApp());&#10;}&#10;" description="How to force landscape orientation" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_switch_toggleButton" value="Switch(&#10;                  value: _showChart,&#10;                  onChanged: (bool value) {&#10;                    setState(() {&#10;                      _showChart = value;&#10;                    });&#10;                  }," description="Good old switch/toggleButton" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_orientation" value="    var isLandscape =&#10;        MediaQuery.of(context).orientation == Orientation.landscape " description="Determine the orientation of a device" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_if" value=" // See udemy/flutter-dart-complete-guide/personal_expenses&#10; if (!isLandscape) chartContainer(context, appBar),&#10;            if (!isLandscape) txListWidget,&#10;            if (isLandscape)&#10;              _showChart ? chartContainer(context, appBar) : txListWidget" description="New if statement inside widgets" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_if_widgets" value=" // See udemy/flutter-dart-complete-guide/personal_expenses&#10; if (!isLandscape) chartContainer(context, appBar),&#10;            if (!isLandscape) txListWidget,&#10;            if (isLandscape)&#10;              _showChart ? chartContainer(context, appBar) : txListWidget" description="New Flutter feature: if statement inside widgets" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_account_for_keyboard_space" value=" // See new_transaction in udemy/flutter-dart-complete-guide/personal_expenses&#10; // Pay attention to SingleChildScrollView and &#10; // EdgeInsets.only(&#10; //             top: 10,&#10; //             left: 10,&#10; //             right: 10,&#10; //             bottom: MediaQuery.of(context).viewInsets.bottom + 10),&#10;         &#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return SingleChildScrollView(&#10;      child: Card(&#10;        elevation: 5,&#10;        // color: Colors.black,&#10;        child: Container(&#10;          padding: EdgeInsets.only(&#10;              top: 10,&#10;              left: 10,&#10;              right: 10,&#10;              bottom: MediaQuery.of(context).viewInsets.bottom + 10),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.end,&#10;            children: [&#10;              TextField(&#10;                controller: _titleController,&#10;                decoration: InputDecoration(&#10;                  labelText: 'Title',&#10;                ),&#10;                onSubmitted: (_) =&gt; _submitData(),&#10;              ),&#10;              TextField(&#10;                controller: _amountController,&#10;                decoration: InputDecoration(&#10;                  labelText: 'Amount',&#10;                ),&#10;&#10;                keyboardType: TextInputType.numberWithOptions(&#10;                    signed: true, decimal: true),&#10;                onSubmitted: (_) =&gt; _submitData(),&#10;                // onChanged: (val) =&gt; amountInput = val,&#10;              ),&#10;              Padding(&#10;                padding: const EdgeInsets.only(top: 20),&#10;                child: Row(&#10;                  children: [&#10;                    Expanded(&#10;                      child: Text(&#10;                        _selectedDate == null&#10;                            ? 'No date chosen'&#10;                            : 'Picked date: ${DateFormat.yMd().format(_selectedDate!)}',&#10;                      ),&#10;                    ),&#10;                    FlatButton(&#10;                      child: Text(&#10;                        'Choose Date',&#10;                        style: TextStyle(&#10;                            color: Theme.of(context).colorScheme.primary,&#10;                            fontWeight: FontWeight.w700),&#10;                      ),&#10;                      onPressed: _presentDatePicker,&#10;                    ),&#10;                  ],&#10;                ),&#10;              ),&#10;              ElevatedButton.icon(&#10;                style: ElevatedButton.styleFrom(&#10;                    primary: Theme.of(context).colorScheme.secondary,&#10;                    onPrimary: Colors.white),&#10;                label: Text('Add Transaction',&#10;                    style: TextStyle(&#10;                      color: Colors.black,&#10;                    )),&#10;                icon: Icon(&#10;                  Icons.add,&#10;                  color: Colors.black,&#10;                ),&#10;                // onPressed: () =&gt; print('Buy'),&#10;                onPressed: () =&gt; _submitData(),&#10;              ),&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;" description="How to leave anough space for the keyboard" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_device_orientation_landscape" value="    var isLandscape =&#10;        MediaQuery.of(context).orientation == Orientation.landscape " description="Determine if the orientation of a device is landscape" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_device_orientation_portrait" value="    var isPortrait =&#10;        MediaQuery.of(context).orientation == Orientation.portrait;" description="Determine if the orientation of a device is portrait" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_device_size_statusBar" value="MediaQuery.of(context).padding.top $END$" description="Determine the size of the status bar" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_device_size_height" value="  MediaQuery.of(context).size.height $END$" description="Determine the size of the device's height" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_device_size_width" value=" MediaQuery.of(context).size.width $END$&#10;" description="Determine the size of the device's width" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_device_platform" value="// import 'dart:io';&#10;&#10;// Platform.isAndroid&#10;// Platform.isIOS&#10;&#10;" description="Determine the platform the device is running on" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_mainAxisSizeMinMax" value="mainAxisSize: MainAxisSize.min " description="Using MainAxisSize.min/max" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_tree_widget_element_render" value="// Widget tree: everything gets recreated&#10;&#10;// Element tree: never get recreated. It keeps a reference of the widgets and updates &#10;//               its reference to point to the widget that has been rebuilt&#10;//               then, it signals to the render tree to only &#10;//               rerenders the delta.&#10;&#10;// Render tree: responsible for painting the widgets on the screen" description="How Flutter works under the cover" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_what_forces_a_re_build" value="// 1) setState&#10;// 2) MediaQuery (doesn't care which function is called)&#10;// 3) Theme update " description="The 3 conditions that forces build to be called" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_create_skeleton_app" value="flutter create -t skeleton assistant" description="Command to create a skeleton app" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_how_to_import_a_flutter_project" value="// File -&gt; Import Project -&gt; Choose project using the file explorer -&gt; Choose gradle" description="How to import a Flutter project" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_lifecycle_widget" value="// Stateless Widgets&#10;// Constructor function -&gt; build()&#10;&#10;// Statefule Widgets&#10;// Constructor function -&gt; initState() -&gt; build() -&gt; setState() -&gt; didUpdateWidget() -&gt; build() -&gt; dispose() (in case you conditionally changed the widget(s))" description="Widget lifecycle" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_lifecycle_app" value="// Inactive -&gt; no user input is received&#10;// Paused -&gt; running in the background&#10;// Resumed &#10;// Suspended -&gt; about to be terminated" description="App lifecycle" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_lifecycle_listen_to_app" value="&#10;  @override&#10;  void initState() {&#10;    WidgetsBinding.instance!.addObserver(this);&#10;    super.initState();&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    WidgetsBinding.instance!.removeObserver(this);&#10;    super.dispose();&#10;  }&#10;" description="Listen to App lifecycle" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_listview_builder_option" value="// final List&lt;Transaction&gt; transactions;&#10;// &#10;// ========&gt;   builder is for Dynamic lists  &lt;=========&#10;// ---- Without a builder ------------------------------------&#10;// ListView(&#10;//   children: transactions&#10;//       .map((tx) =&gt; TransactionItem(&#10;//           tx: tx, deleteTransactionHandler: deleteTransactionHandler))&#10;//  .toList());&#10;&#10;// ---- Using a builder ------------------------------------&#10;// ListView.builder(&#10;//     itemBuilder: (context, index) {&#10;//       final tx = transactions[index];&#10;//       return TransactionItem(&#10;//           tx: tx,&#10;//           deleteTransactionHandler: deleteTransactionHandler);&#10;//     },&#10;//     itemCount: transactions.length,&#10;//   );" description="Creating a ListView with or without a builder" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_gradient_linear" value="BoxDecoration(&#10;gradient: LinearGradient(&#10;    colors: [color.withOpacity(0.7), color],&#10;    begin: Alignment.topLeft,&#10;    end: Alignment.bottomRight),&#10;borderRadius: BorderRadius.circular(15))," description="Linear Gradient" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_grid_simpleGridView" value="GridView(&#10;        children: DUMMY_CATEGORIES&#10;            .map((catData) =&gt;&#10;                CategoryItem(title: catData.title, color: catData.color))&#10;            .toList(),&#10;        gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(&#10;          maxCrossAxisExtent: 200, // width&#10;          childAspectRatio: 3 / 2, // 3 height / 2 width, (300 / 200)&#10;          crossAxisSpacing: 20,&#10;          mainAxisSpacing: 20,&#10;        ),&#10;      )" description="GridView" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_padding_edgeInsetsAll" value="padding: const EdgeInsets.all($PADDING$),&#10;" description="Padding EdgeInsetsAll" toReformat="false" toShortenFQNames="true">
    <variable name="PADDING" expression="" defaultValue="20" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_listViewWithBuilder" value="// DON'T FORGET TO SPECIFY THE itemCount!!!!&#10;ListView.builder(&#10;                    itemBuilder: (context, index) {&#10;                      final String $LIST_ITEM$ = $LIST$[index];&#10;                      return Text($LIST_ITEM$);&#10;                    },&#10;                    itemCount: $LIST$.length,&#10;                  )," description="Simple list view with a builder" toReformat="false" toShortenFQNames="true">
    <variable name="LIST" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LIST_ITEM" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_grid_inkwell" value="  //   final String id;&#10;  //   final String title;&#10;  //   final Color color;&#10;InkWell(&#10;      onTap: () {&#10;       &#10;      },&#10;      splashColor: Theme.of(context).primaryColor,&#10;      borderRadius: BorderRadius.circular(15),&#10;      child: Container(&#10;        padding: const EdgeInsets.all(15),&#10;        child: Text(&#10;          title,&#10;          style: Theme.of(context).textTheme.headline6,&#10;        ),&#10;        decoration: BoxDecoration(&#10;            gradient: LinearGradient(&#10;                colors: [color.withOpacity(0.7), color],&#10;                begin: Alignment.topLeft,&#10;                end: Alignment.bottomRight),&#10;            borderRadius: BorderRadius.circular(15)),&#10;      ),&#10;    );" description="InkWell" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_marginEdgeInsetsAll" value="margin: const EdgeInsets.all($PADDING$),&#10;" description="Margin EdgeInsetsAll" toReformat="false" toShortenFQNames="true">
    <variable name="PADDING" expression="" defaultValue="20" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_shape_containerRoundedCorners" value="// See f_comp_containerRoundedCorners&#10;// Rounded corners at the top&#10; BoxDecoration(&#10;                  color: Colors.white,&#10;                  borderRadius: BorderRadius.only(&#10;                    topLeft: Radius.circular(30.0),&#10;                    topRight: Radius.circular(30.0),&#10;                  ),&#10;                ),&#10;" description="Container with rounded top corners" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_positionedWidget" value=" Positioned(&#10;    bottom: 20,&#10;    right: 10,&#10;    child: Container(),&#10;),&#10;" description="Positioned Widget" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_enum_to_string" value="// Description: Better conversion of ENUMs to string - It also can handle converting back again!&#10;// URL: https://pub.dev/packages/enum_to_string&#10;// Install: dart pub add enum_to_string&#10;// App: flutter_deli_meals (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_deli_meals)&#10;&#10;// Example:&#10;EnumToString.convertToString(someEnum)" description="Get the string format  of a enum" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_template" value="// Description:  &#10;// URL:  &#10;// Install: &#10;// App: Name (full location: src/mobile/flutter/...)&#10;&#10;// Example: &#10;&#10;&#10;// Full example" description="Template to use to add package info" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_http" value="// MIGHT NEED TO BE IMPORTED MANUALLY: &#10;import 'package:http/http.dart' as http;&#10;&#10;// Description: consume HTTP resources&#10;// URL: https://pub.dev/packages/http&#10;// Install: flutter pub add http&#10;// App: Angela's bitcoin_picker (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-14/bitcoin_picker)&#10;&#10;// Example:&#10;http.Response response = await http.get(Uri.parse(requestURL));&#10;&#10;// Full example&#10;class CoinData {&#10;  Future getCoinData(String selectedCurrency) async {&#10;    Map&lt;String, String&gt; map = {};&#10;    for (var crypto in cryptoList) {&#10;      String requestURL =&#10;          '$coinAPIURL/$crypto/$selectedCurrency?apiKey=$apiKey';&#10;      // String requestURL = '$coinAPIURL/BTC/USD?apikey=$apiKey';&#10;      http.Response response = await http.get(Uri.parse(requestURL));&#10;&#10;      if (response.statusCode == 200) {&#10;        var decodedData = jsonDecode(response.body);&#10;        var lastPrice = decodedData['rate'];&#10;&#10;        map[crypto] = lastPrice.toStringAsFixed(0);&#10;      } else {&#10;        print(response.statusCode);&#10;        throw 'Problem with the get request';&#10;      }&#10;    }&#10;    print('Map: $map');&#10;    return map;&#10;  }&#10;}" description="Http package to consume http resources" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_animatedText" value="// Description: A flutter package which contains a collection of some cool and awesome text animations&#10;// URL: https://pub.dev/packages/animated_text_kit&#10;// Install: flutter pub get&#10;// App: flash_chat and Full location (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-15/flash_chat)&#10;&#10;// Example:&#10;  AnimatedTextKit(&#10;    animatedTexts: [&#10;      TypewriterAnimatedText(&#10;        'Flash Chat',&#10;        textStyle: const TextStyle(&#10;          color: Colors.black54,&#10;          fontSize: 40.0,&#10;          fontWeight: FontWeight.w900,&#10;        ),&#10;        speed: const Duration(milliseconds: 500),&#10;      ),&#10;    ],&#10;    totalRepeatCount: 4,&#10;    displayFullTextOnTap: true,&#10;    stopPauseOnTap: true,&#10;  )&#10;&#10;// Full example" description="A flutter package which contains a collection of some cool and awesome text animations" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_modalProgressHUD" value="// Description: A simple widget wrapper to enable modal progress HUD&#10;// URL: https://pub.dev/packages/modal_progress_hud_nsn&#10;// Install: flutter pub add modal_progress_hud_nsn&#10;// App: flash_chat and Full location (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-15/flash_chat)&#10;&#10;// Example:&#10;// import 'package:modal_progress_hud_nsn/modal_progress_hud_nsn.dart';&#10;class LoginScreen extends StatefulWidget {&#10;  static const String id = 'login_screen';&#10;&#10;  @override&#10;  _LoginScreenState createState() =&gt; _LoginScreenState();&#10;}&#10;&#10;class _LoginScreenState extends State&lt;LoginScreen&gt; {&#10;  final _auth = FirebaseAuth.instance;&#10;&#10;  String email = &quot;azeez.kadhi@gmail.com&quot;;&#10;  String password = &quot;Mth475&quot;;&#10;  bool showSpinner = false;&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.white,&#10;      body: ModalProgressHUD(&#10;        inAsyncCall: showSpinner,&#10;        child: RoundedButton(&#10;            color: Colors.lightBlueAccent,&#10;            title: 'Log In',&#10;            onPressed: () async {&#10;              setState(() {&#10;                showSpinner = false;&#10;              });&#10;            }&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" description="A simple widget wrapper to enable modal progress HUD" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_geolocator" value="// Description: A Flutter geolocation plugin which provides easy access to platform specific location services&#10;// URL:https://pub.dev/packages/geolocator&#10;// Install: flutter pub add geolocator&#10;// App: clima (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-13/clima)&#10;&#10;// Example&#10;// Add this to a services&#10;import 'package:geolocator/geolocator.dart';&#10;&#10;class Location {&#10;  double latitude = 0.0;&#10;  double longitude = 0.0;&#10;&#10;  Future&lt;void&gt; getCurrentLocation() async {&#10;    try {&#10;      Position position = await Geolocator.getCurrentPosition(&#10;          desiredAccuracy: LocationAccuracy.low);&#10;      latitude = position.latitude;&#10;      longitude = position.longitude;&#10;    } catch (e) {&#10;      print(e);&#10;    }&#10;  }&#10;}&#10;" description="Geolocator" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_loadingIndicators_flutter_spinkit" value="&#10;// Description: A collection of loading indicators animated with flutter. Heavily inspired by @tobiasahlin's SpinKit.&#10;// URL: https://pub.dev/packages/flutter_spinkit&#10;// Install:flutter pub add flutter_spinkit&#10;// App: clima (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-13/clima)&#10;&#10;// Example:&#10;SpinKitDoubleBounce(&#10;  color: Colors.white,&#10;  size: 100,&#10;)&#10;" description="A collection of loading indicators animated" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_rflutter_alert" value="// Description: RFlutter Alert is super customizable and easy-to-use alert/popup dialogs for Flutter. You may create reusable alert styles or add buttons as much as you want with ease.&#10;// URL: https://pub.dev/packages/rflutter_alert&#10;// Install: flutter pub add rflutter_alert&#10;// App: quizzler_flutter (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-10/quizzler_flutter)&#10;&#10;// Example:&#10;void checkAndShowAlert(BuildContext context) {&#10;  if (quizBrain.hasReachedEndOfQuiz()) {&#10;    Alert(&#10;            context: context,&#10;            title: &quot;End of quiz&quot;,&#10;            desc: &quot;You have reached the end of the quiz&quot;)&#10;        .show();&#10;  }&#10;}" description="RFlutter Alert is super customizable and easy-to-use alert/popup dialogs for Flutter" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_fontAwesome" value="// Description: The Font Awesome Icon pack available as set of Flutter Icons.&#10;// URL: https://pub.dev/packages/font_awesome_flutter&#10;// Install:flutter pub add font_awesome_flutter&#10;// App: bmi_calculator_flutter (src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-12/bmi_calculator_flutter)&#10;&#10;// Example:&#10;RoundIconButton(&#10;  icon: FontAwesomeIcons.minus,&#10;  onPressed: () {&#10;    setState(() {&#10;      weight--;&#10;    });&#10;  },&#10;)" description="Font Awesome" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_nav_retrieve1Argument" value="final $VAR$ = ModalRoute.of(context)!.settings.arguments as String;&#10;" description="Retrieve 1 argument using ModalRoute" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_pushOfNamedWithMultipleArgs" value="  Navigator.of(context).pushNamed(CategoryMealsScreen.routeName,&#10;            arguments: {'$KEY_1$': $VALUE_1$, '$KEY_2$': $VALUE_2$});" description="Push to a named route with multiple args" toReformat="false" toShortenFQNames="true">
    <variable name="KEY_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE_2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_pushOfNamedWith1Arg" value="Navigator.of(context).pushNamed($CLASS_NAME$.routeName, arguments: $ARG$);&#10;" description="Navigator.of(context) Push to a named route with 1 arg" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="ARG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_getRouteWithMultipleArguments" value=" final routeArgs =&#10;        ModalRoute.of(context)!.settings.arguments as Map&lt;String, String&gt;;&#10;final $VAR_1$ = routeArgs['$VAR_1$'];&#10;    final $VAR_2$ = routeArgs['$VAR_2$'];" description="Get route with multiple arguments" toReformat="false" toShortenFQNames="true">
    <variable name="VAR_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_default_onGenerateRoute" value="onGenerateRoute: (settings) {&#10;        print('settings: ${settings.arguments}');&#10;&#10;        // if (settings.name == '/meal-detail') {&#10;        //   return  MealDetailScreen(); etc&#10;        // } else if (settings.name == '/something-else') {&#10;        //   return SomeOtherScreen();&#10;        // } &#10;    return MaterialPageRoute(builder: (ctx) =&gt; $SCREEN_NAME$);&#10;}," description="Define a default route to fall back to" toReformat="false" toShortenFQNames="true">
    <variable name="SCREEN_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_default_404_onUnknownRoute" value="// Fall back in case onGenerateRoute fails&#10;onUnknownRoute: (settings) {&#10;        return MaterialPageRoute(builder: (ctx) =&gt; $SCREEN_NAME$());&#10;}," description="Defines a last resort (404-not found) route" toReformat="false" toShortenFQNames="true">
    <variable name="SCREEN_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_styleTextUsingExistingTheme" value="style: Theme.of(context).textTheme.headline6)" description="Use existing theme to style text" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_AVOID_adding_listview_to_columns" value="// Remember!&#10;// Wrap ListView with Expanded" description="Column and ListView have infinite height!!!!" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_theme_deprecated_accentColor" value="Theme.of(context).colorScheme.secondary," description="Theme.of(context).accentColor is deprecated, instead use:" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_text_padding" value="  Padding(&#10;   padding: const EdgeInsets.symmetric(&#10;       vertical: 5, horizontal: 10),&#10;   child: Text($TEXT$),&#10;)," description="Just use a padding widget" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_boxDecorationForContainer" value="// Add inside container&#10;                decoration: BoxDecoration(&#10;                  color: Colors.white,&#10;                  borderRadius: BorderRadius.only(&#10;                    topLeft: Radius.circular(30.0),&#10;                    topRight: Radius.circular(30.0),&#10;                  ),&#10;                )," description="BoxDecoration for Container (add inside a container)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_listTile" value="ListTile(&#10;                leading: CircleAvatar(&#10;                  child: Text('SomeText'),&#10;                ),&#10;                title: Text('Some Text'),&#10;              )" description="ListTile for ListView" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_divider" value="// Has interesting parameters&#10;&#10;Divider()" description="Divider" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_top_tab_controller_self_managed" value="// Adding tabs at the top, just return this in the build function&#10;DefaultTabController(&#10;        length: 2,&#10;        initialIndex: 0,&#10;        child: Scaffold(&#10;          appBar: AppBar(&#10;            title: Text('Meals'),&#10;            bottom: TabBar(&#10;              tabs: [&#10;                Tab(icon: Icon(Icons.category), text: 'Categories'),&#10;                Tab(icon: Icon(Icons.star), text: 'Favorites'),&#10;              ],&#10;            ),&#10;          ),&#10;          body: TabBarView(&#10;            children: [CategoriesScreen(), FavoriteScreen()],&#10;          ),&#10;        ));" description="Top Tab Controlle that is self-managed" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_bottom_tab_controller_dev_managed" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_deli_meals/screens/categories_screen.dart';&#10;import 'package:flutter_deli_meals/screens/favorite_screen.dart';&#10;&#10;class TabScreen extends StatefulWidget {&#10;  static const routeName = '/tab-screen';&#10;&#10;  @override&#10;  State&lt;TabScreen&gt; createState() =&gt; _TabScreenState();&#10;}&#10;&#10;class _TabScreenState extends State&lt;TabScreen&gt; {&#10;  static const String title = 'title';&#10;  static const String page = 'page';&#10;&#10;  final List&lt;Map&lt;String, dynamic&gt;&gt; _pages = [&#10;    {page: CategoriesScreen(), title: 'Categories'},&#10;    {page: FavoriteScreen(), title: 'Favorites'},&#10;  ];&#10;  int _selectedPageIndex = 0;&#10;&#10;  void _selectPage(int index) {&#10;    setState(() {&#10;      _selectedPageIndex = index;&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    var selectedTab = _pages[_selectedPageIndex];&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: Text('Meals'),&#10;      ),&#10;      body: selectedTab[page],&#10;      bottomNavigationBar: BottomNavigationBar(&#10;        onTap: _selectPage,&#10;        backgroundColor: Theme.of(context).primaryColor,&#10;        unselectedItemColor: Colors.white,&#10;        selectedItemColor: Theme.of(context).colorScheme.secondary,&#10;        currentIndex: _selectedPageIndex,&#10;        // type: BottomNavigationBarType.shifting. Default type is fixed&#10;        // selectedFontSize&#10;        items: [&#10;          BottomNavigationBarItem(&#10;            backgroundColor: Theme.of(context).primaryColor,&#10;            icon: Icon(Icons.category),&#10;            label: selectedTab[title],&#10;          ),&#10;          BottomNavigationBarItem(&#10;            backgroundColor: Theme.of(context).primaryColor,&#10;            icon: Icon(Icons.star),&#10;            label: selectedTab[title],&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="Bottom Tab Controller managed by the developer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_primaryColor" value="Theme.of(context).primaryColor" description="Primary color theme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_secondaryColor" value="Theme.of(context).colorScheme.secondary;" description="Secondary color theme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_deprecated_textTheme.title" value="Theme.of(context).textTheme.headline6" description="Theme.of(context).textTheme.title is deprecated, instead use:" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_textTheme_title_headline6" value="Theme.of(context).textTheme.headline6" description="Textheme's title" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_addScreenRouteName" value="// Don't forget to add this route in your main.dart file (or whatever you are using to define your routes)&#10;static const routeName = '/$ROUT_NAME$';&#10;" description="Defines the const for routeName" toReformat="false" toShortenFQNames="true">
    <variable name="ROUT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="f_nav_pushReplacementNamed" value="Navigator.pushReplacementNamed(context, $NAME$.routeName);&#10;" description="Replace a screen to avoid adding it to the stack." toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_color_custom_material_colors" value="// To convert from hex to rgb: https://www.rapidtables.com/convert/color/hex-to-rgb.html&#10;&#10;import 'package:flutter/material.dart';&#10;&#10;const Map&lt;int, Color&gt; greyColor = {&#10;  50: Color.fromRGBO(84, 110, 122, .1),&#10;  100: Color.fromRGBO(84, 110, 122, .2),&#10;  200: Color.fromRGBO(84, 110, 122, .3),&#10;  300: Color.fromRGBO(84, 110, 122, .4),&#10;  400: Color.fromRGBO(84, 110, 122, .5),&#10;  500: Color.fromRGBO(84, 110, 122, .6),&#10;  600: Color.fromRGBO(84, 110, 122, .7),&#10;  700: Color.fromRGBO(84, 110, 122, .8),&#10;  800: Color.fromRGBO(84, 110, 122, .9),&#10;  900: Color.fromRGBO(84, 110, 122, 1),&#10;};&#10;&#10;const Map&lt;int, Color&gt; orangeColor = {&#10;  50: Color.fromRGBO(255, 138, 101, .1),&#10;  100: Color.fromRGBO(255, 138, 101, .2),&#10;  200: Color.fromRGBO(255, 138, 101, .3),&#10;  300: Color.fromRGBO(255, 138, 101, .4),&#10;  400: Color.fromRGBO(255, 138, 101, .5),&#10;  500: Color.fromRGBO(255, 138, 101, .6),&#10;  600: Color.fromRGBO(255, 138, 101, .7),&#10;  700: Color.fromRGBO(255, 138, 101, .8),&#10;  800: Color.fromRGBO(255, 138, 101, .9),&#10;  900: Color.fromRGBO(255, 138, 101, 1),&#10;};&#10;&#10;const MaterialColor greyMaterialColor = MaterialColor(0xFF546E7A, greyColor);&#10;const MaterialColor orangeMaterialColor =&#10;    MaterialColor(0xFFFF8A65, orangeColor);&#10;" description="My own custom material colors!!!!" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_popWithArg" value="Navigator.of(context).pop($ARG$);&#10;" description="Pop the current screen with an argument" toReformat="false" toShortenFQNames="true">
    <variable name="ARG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_avoid_context_initState_errors" value="// Override didChangeDependencies(), the context is fully hydrated!&#10;&#10;// Error: dependOnInheritedWidgetOfExactType&lt;_ModalScopeStatus&gt;() or dependOnInheritedElement() was called before _CategoryMealsScreenState.initState() completed.&#10;&#10;// initState() {&#10;//  Too early to use context    &#10;// }" description="Avoid using context inside initState" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="funInitState" value="// Warning: use didChangeDependencies() for ModalRoute.of(context) or anything that's loaded/created during initState (too early)&#10;@override&#10;  void initState() {&#10;    super.initState(); // should go first&#10;    $END$&#10;}" description="Function to initState" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="f_tip_where_to_put_constants" value="// Just create constants.dart under utils or utilities folder :)" description="Location for constants values" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_grid_gridTile" value="GridTile(&#10;      child: Image.network(&#10;        imageUrl,&#10;        fit: BoxFit.cover,&#10;)," description="GridTile for GridView" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_imageNetwork" value=" Image.network(&#10;        imageUrl,&#10;        fit: BoxFit.cover,&#10;      )," description="ImageNetwork widget" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_aziz_theme_more_options" value="// import 'package:flutter_shop/utils/material_colors.dart';&#10;// Uses MaterialColors which can be generated by clicking on an existing folder or by creating and selecting a new (utils?) folder&#10;// folder -&gt; new -&gt; MaterialColors&#10;ThemeData(&#10;        primarySwatch: greyMaterialColor,&#10;        accentColor: orangeMaterialColor,&#10;        canvasColor: Color.fromRGBO(255, 254, 229, 1),&#10;        fontFamily: 'Raleway',&#10;        textTheme: ThemeData.light().textTheme.copyWith(&#10;              bodyText1: const TextStyle(&#10;                color: Color.fromRGBO(20, 51, 51, 1),&#10;              ),&#10;              bodyText2: const TextStyle(&#10;                color: Color.fromRGBO(20, 51, 51, 1),&#10;              ),&#10;              headline6: const TextStyle(&#10;                fontSize: 24,&#10;                fontFamily: 'RobotCondensed',&#10;                fontWeight: FontWeight.bold,&#10;              ),&#10;            ),&#10;      )," description="My own orange and grey theme with more options for MaterialApp" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_grid_complexGridView" value="GridTile(&#10;      child: Image.network(&#10;        imageUrl,&#10;        fit: BoxFit.cover,&#10;      ),&#10;      footer: GridTileBar(&#10;        backgroundColor: Colors.black87,&#10;        leading: IconButton(&#10;          icon: Icon(Icons.favorite),&#10;          color: Theme.of(context).colorScheme.secondary,&#10;          onPressed: () {},&#10;        ),&#10;        title: Text(&#10;          title,&#10;          textAlign: TextAlign.center,&#10;        ),&#10;        trailing: IconButton(&#10;          icon: Icon(Icons.shopping_cart),&#10;          color: Theme.of(context).colorScheme.secondary,&#10;          onPressed: () {},&#10;        ),&#10;      ),&#10;    );" description="Complex GridView with more features" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_clipRRect" value="ClipRRect(&#10;      borderRadius: BorderRadius.circular(10),&#10;      child: &#10;)" description="Clip Rounded Rectangle (CRR)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_provider" value="// Description: provider for state management&#10;// URL: https://pub.dev/packages/provider&#10;// Install: flutter pub add provider&#10;// App: flutter_shop (/src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop)&#10;&#10;// Example: flutter_shop has too many examples&#10;// TODO: categorize the API" description="Provider for state management" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_provider_ChangeNotifierProvider_createsVSvalue" value="// Example: ssrc/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;// final productData = Provider.of&lt;Products&gt;(context);&#10;// final products = productData.items;&#10;&#10;// ==&gt; update method: reuses the existing widget:&#10;// ==&gt; Perfect for grids, lists, it updates the entire widget.&#10;// ChangeNotifierProvider.value(&#10;//           value: product,&#10;//           child: ProductItem(),&#10;//         );&#10;&#10;// ==&gt; create method: not ideal for grids, lists,&#10;// ==&gt; IT ONLY UPDATES THE VISIBLE PART AND LEAVES THE REST STALE&#10;// ==&gt; Ideal for this scenario, you instantiate an object and tie to a widget, it's efficient an avoids bugs&#10;// ChangeNotifierProvider(&#10;//           create: (ctx) =&gt; product,&#10;//           child: ProductItem(&#10;//               id: product.id, title: product.title, imageUrl: product.imageUrl),&#10;//         );" description="When to use ChangeNotifierProvider.value(" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_provider_provider.of" value="final $NAME_LC$ = Provider.of&lt;$NAME$&gt;(context);&#10;" description="Calls Provider.of to listen to changes" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LC" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_provider_2_register_multiProvider" value="MultiProvider(&#10;      providers: [&#10;        ChangeNotifierProvider(create: (_) =&gt; $CHANGE_LISTNER_1$),&#10;        ChangeNotifierProvider(create: (_) =&gt; $CHANGE_LISTNER_2$),&#10;      ],&#10;      child: $SCREEN_CLASS$," description="Starting point: define a MultiProvider in main.dart" toReformat="true" toShortenFQNames="true">
    <variable name="CHANGE_LISTNER_1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CHANGE_LISTNER_2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SCREEN_CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_provider_provider.ofListenFalse" value="final $NAME_LC$ = Provider.of&lt;$NAME$&gt;(context, listen: false);&#10;" description="Define a provider with the listen property set to false" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LC" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_popupMenuButton" value="          PopupMenuButton(&#10;            icon: Icon(Icons.more_vert),&#10;            itemBuilder: (_) =&gt; [&#10;              PopupMenuItem(&#10;                  child: Text('Option 1'),&#10;                  value: ),&#10;              PopupMenuItem(child: Text('Option 2'), value: ),&#10;            ],&#10;            onSelected: (int selectedValue) {&#10;              }&#10;            },&#10;          )" description="PopupMenuButton and its PopupMenuItem" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_elevatedButtonRoundedCorners_icon_raisedButton" value="ElevatedButton.icon(&#10;  style: ElevatedButton.styleFrom(&#10;      shape: StadiumBorder(),&#10;      //primary: Theme.of(context).colorScheme.primary&#10;      primary: Theme.of(context).colorScheme.secondary),&#10;&#10;  label: const Text('$TEXT$'),&#10;  icon: const Icon(Icons.$ICON_NAME$),&#10;  onPressed: () {},&#10;)" description="ElevatedButton with rounded corners, replacement for RaisedButton" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ICON_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_spacer" value="Spacer()," description="Spacer to create a gap" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_sizedBoxHeight" value="const SizedBox(&#10;    height: 10,&#10;)," description="Add a SizedBox with height" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_listViewWithBuilderInsideExpanded" value="// DON'T FORGET TO SPECIFY THE itemCount!!!!&#10; Expanded(&#10;                    child:ListView.builder(&#10;                    itemBuilder: (context, index) {&#10;                      final String $LIST_ITEM$ = $LIST$[index];&#10;                      return Text($LIST_ITEM$);&#10;                    },&#10;                    itemCount: $LIST$.length,&#10;                  ),&#10;                  )," description="Simple ListView with a builder inside Expanded" toReformat="false" toShortenFQNames="true">
    <variable name="LIST_ITEM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LIST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_text_fittedBox" value="  const SizedBox(&#10;                    height: 10,&#10;                  ),&#10;                  // DON'T FORGET TO SPECIFY THE itemCount!!!!&#10;                    child: ListView.builder(&#10;                      itemBuilder: (context, index) {&#10;&#10;                        var cartItem = cart.items.values.toList()[index];&#10;                        return CartItemWidget(&#10;                            id: cartItem.id,&#10;                            title: cartItem.title,&#10;                            quantity: cartItem.quantity,&#10;                            price: cartItem.price);&#10;                      },&#10;                      itemCount: cart.itemCount,&#10;  ),&#10;" description="FittedBox forces the text to fit inside a widget" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_key_valueKey" value="const ValueKey('$KEY$')," description="Key" toReformat="false" toShortenFQNames="true">
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_roundedRectangleBorder" value="ElevatedButton(&#10;  onPressed: () {},&#10;  child: Text('Button'),&#10;  style: ElevatedButton.styleFrom(&#10;    shape: RoundedRectangleBorder(&#10;      borderRadius: BorderRadius.circular(12), // &lt;-- Radius&#10;    ),&#10;  ),&#10;)" description="Elevated button" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_circleBorder" value="ElevatedButton(&#10;  onPressed: () {},&#10;  child: Text('$TEXT$'),&#10;  style: ElevatedButton.styleFrom(&#10;    shape: CircleBorder(),&#10;    padding: EdgeInsets.all(24),&#10;  ),&#10;)" description="Elevated button" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_beveledRectangleBorder" value="ElevatedButton(&#10;  onPressed: () {},&#10;  child: Text('$TEXT$'),&#10;  style: ElevatedButton.styleFrom(&#10;    shape: BeveledRectangleBorder(&#10;      borderRadius: BorderRadius.circular(12)&#10;    ),&#10;  ),&#10;)" description="Elevated button" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_outlined_stadiumBorder" value="OutlinedButton(&#10;  onPressed: () {},&#10;  child: const Text('$TEXT$'),&#10;  style: OutlinedButton.styleFrom(&#10;    shape: const BeveledRectangleBorder(&#10;      borderRadius: const BorderRadius.circular(12),&#10;    ),&#10;  ),&#10;)" description="Outlined button with stadium border, replacement for Outline button" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_outlined_roundedRectangleBorder" value="OutlinedButton(&#10;  onPressed: () {},&#10;  child: const Text('$TEXT$'),&#10;  style: OutlinedButton.styleFrom(&#10;    shape: const BeveledRectangleBorder(&#10;      borderRadius: const BorderRadius.circular(12),&#10;    ),&#10;  ),&#10;)" description="Outlined button with rounded rectangular border, replacement for Outline button" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_outlined_circleBorder" value="OutlinedButton(&#10;  onPressed: () {},&#10;  child: const Text('$TEXT$'),&#10;  style: OutlinedButton.styleFrom(&#10;    shape: const CircleBorder(),&#10;    padding: const EdgeInsets.all(24),&#10;  ),&#10;)" description="Outlined button with circle border, replacement for Outline button" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_outlined_beveledRectangleBorder" value="OutlinedButton(&#10;  onPressed: () {},&#10;  child: const Text('$TEXT$'),&#10;  style: OutlinedButton.styleFrom(&#10;    shape: const BeveledRectangleBorder(&#10;      borderRadius: const BorderRadius.circular(12),&#10;    ),&#10;  ),&#10;)" description="Outlined button with beveled rectangular border, replacement for Outline button" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_key_uniqueKey" value="UniqueKey()," description="Unique Key" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_chip" value="                  Chip(&#10;                    label: Text('someText',&#10;                      style: TextStyle(&#10;                          color: Theme.of(context)&#10;                              .primaryTextTheme&#10;                              .headline6!&#10;                              .color),&#10;                    ),&#10;                    backgroundColor: Theme.of(context).primaryColor,&#10;                  )" description="Chip" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_sizedBoxWidth" value="const SizedBox(&#10;    width: 10,&#10;)," description="Add a SizedBox with width" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_provider_callFunctionListenFalse" value="Provider.of&lt;$NAME$&gt;(context, listen: false).$FUNCTION$" description="Call Provider.of to access a function with listen set to false" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_provider_callFunction" value="Provider.of&lt;$NAME$&gt;(context).$FUNCTION$&#10;" description="Call Provider.of to access a function with listen set to false" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_card_complex" value="Card(&#10;        margin: buildEdgeInsets(),&#10;        child: Padding(&#10;          padding: EdgeInsets.all(8),&#10;          child: ListTile(&#10;            leading: CircleAvatar(&#10;              child: FittedBox(child: Text('\$$price')),&#10;            ),&#10;            title: Text(title),&#10;            subtitle: Text('Total: \$${(price * quantity)}'),&#10;            trailing: Text('$quantity x'),&#10;          ),&#10;        ),&#10;      )" description="Cart" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_card" value=" Card(&#10;      margin: const EdgeInsets.all(10),&#10;      child: $WIDGET$,&#10;    );" description="Cart" toReformat="false" toShortenFQNames="true">
    <variable name="WIDGET" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_nav_pushOfReplacementNamed" value="Navigator.of(context).pushReplacementNamed($NAME$.routeName);&#10;" description="Replace a screen to avoid adding it to the stack." toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_textButton_flatButton" value="TextButton(&#10;            style: TextButton.styleFrom(&#10;              textStyle: const TextStyle(fontSize: 20),&#10;            ),&#10;            child: const Text('$TEXT$'),&#10;            onPressed: () {},&#10;)," description="Text button, replacement for FlattButton" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_textButtonWithGradientColors_flatButton" value="         ClipRRect(&#10;            borderRadius: BorderRadius.circular(4),&#10;            child: Stack(&#10;              children: &lt;Widget&gt;[&#10;                Positioned.fill(&#10;                  child: Container(&#10;                    decoration: const BoxDecoration(&#10;                      gradient: LinearGradient(&#10;                        colors: &lt;Color&gt;[&#10;                          Color(0xFF0D47A1),&#10;                          Color(0xFF1976D2),&#10;                          Color(0xFF42A5F5),&#10;                        ],&#10;                      ),&#10;                    ),&#10;                  ),&#10;                ),&#10;                TextButton(&#10;                  style: TextButton.styleFrom(&#10;                    padding: const EdgeInsets.all(16.0),&#10;                    primary: Colors.white,&#10;                    textStyle: const TextStyle(fontSize: 20),&#10;                  ),&#10;                  child: const Text('Gradient'),&#10;                  onPressed: () {},&#10;                ),&#10;              ],&#10;            ),&#10;          )," description="Text button with Gradient colors, replacement for FlattButton" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_showAlertDialog" value="showDialog(&#10;          context: context,&#10;          builder: (ctx) =&gt; AlertDialog(&#10;            title: Text('$TITLE$'),&#10;            content: Text(&#10;              '$CONTENT$',&#10;            ),&#10;            actions: [&#10;              TextButton(&#10;                style: TextButton.styleFrom(&#10;                  textStyle: const TextStyle(fontSize: 20),&#10;                ),&#10;                onPressed: () {&#10;&#10;                },&#10;                child: const Text('$NEGATIVE$'),&#10;              ),&#10;              TextButton(&#10;                style: TextButton.styleFrom(&#10;                  textStyle: const TextStyle(fontSize: 20),&#10;                ),&#10;                onPressed: () {},&#10;                child: const Text('$POSITIVE$'),&#10;              ),&#10;            ],&#10;          ),&#10;        );" description="Displays an AlertDialog" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NEGATIVE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="POSITIVE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_iconButton" value="IconButton(icon: const Icon($ICON$), onPressed: () {},),&#10;" description="Icon Button" toReformat="false" toShortenFQNames="true">
    <variable name="ICON" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_errorColor" value="Theme.of(context).errorColor" description="Error color theme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_fix_listTileTrailingWidgetError" value="// Error:&#10;// Trailing widget consumes entire tile width. Please use a sized widget, or consider replacing ListTile with a custom widget&#10;&#10;// Fix:&#10;// Add min size to the Row mainAxisSize: MainAxisSize.min&#10;" description="Error from adding Row to ListTile" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_nav_addSingleRoute" value="$CLASS$.routeName: (context) =&gt; $CLASS$()," description="Define routes insid Material App" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_formListView_vs_Colum" value="// Short forms: ListView&#10;// Long forms or landscape mode: Column with SingleChildScrollView&#10;&#10;// Why? ListView dynamically adds and removes the re-adds the widgets as they scroll out of &#10;// and back into view" description="When to use ListView or Column" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_super_dispose" value="@override&#10;void dispose() {&#10;   $END$&#10;   super.dispose();&#10;}" description="dispose function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="funDidChangeDependencies" value="@override&#10;void didChangeDependencies() {&#10;     $END$&#10;  super.didChangeDependencies();&#10;}" description="Function for didChangeDependencies" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="f_provider_callFunctionDelayCall" value="&#10;Future.delayed(Duration.zero).then((_) =&gt;&#10;        Provider.of&lt;$NAME$&gt;(context, listen: false).$FUNCTION$&#10;);" description="Use a future to delay a function call" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_snackbar" value="ScaffoldMessenger.of(context).showSnackBar(&#10;  SnackBar(&#10;    content: const Text('$MESSAGE$'),&#10;  ),&#10;);" description="Snackbar" toReformat="false" toShortenFQNames="true">
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_http_patch_example" value="// App: src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;// With rollback!&#10;  Future&lt;void&gt; toggleFavoriteStatus() async {&#10;    final oldStatus = isFavorite;&#10;    isFavorite = !isFavorite;&#10;    notifyListeners();&#10;&#10;    final updateUrl =&#10;        'https://flutter-shop-aziz-default-rtdb.firebaseio.com/products/$id.json';&#10;    try {&#10;      final response = await http.patch(Uri.parse(updateUrl),&#10;          body: json.encode({&#10;            'isFavorite': isFavorite,&#10;          }));&#10;      if (response.statusCode &gt;= 400) {&#10;        _setFatValue(oldStatus);&#10;      }&#10;    } catch (e) {&#10;      _setFatValue(oldStatus);&#10;&#10;      print(e);&#10;    }&#10;  }&#10;&#10;  void _setFatValue(bool newValue) {&#10;    isFavorite = newValue;&#10;    notifyListeners();&#10;  }&#10;        &#10;// Another example:&#10;//  Future&lt;void&gt; updateProduct(Product newProduct) async {&#10;//     var id = newProduct.id;&#10;//     final prodIndex = _items.indexWhere((prod) =&gt; prod.id == id);&#10;//     print('id: $id');&#10;// &#10;//     if (prodIndex &gt;= 0) {&#10;//       final updateUrl =&#10;//           'https://flutter-shop-aziz-default-rtdb.firebaseio.com/products/$id.json';&#10;//       await http.patch(Uri.parse(updateUrl),&#10;//           body: json.encode({&#10;//             'title': newProduct.title,&#10;//             'description': newProduct.description,&#10;//             'imageUrl': newProduct.imageUrl,&#10;//             'price': newProduct.price,&#10;//           }));&#10;//       _items[prodIndex] = newProduct;&#10;//       notifyListeners();&#10;//     } else {&#10;//       print('....');&#10;//     }&#10;//   }        " description="http.patch example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_http_patch" value=" try {&#10;  final response = await http.patch(Uri.parse($URL$),&#10;      body: json.encode({&#10;        '$KEY$': $VALUE$,&#10;      }));&#10;      print('Response: ${json.decode(response.body)}');&#10;  if (response.statusCode &gt;= 400) {&#10;    &#10;  }&#10;} catch (e) {&#10;  &#10;&#10;  print(e);&#10;}" description="http patch with error handling" toReformat="false" toShortenFQNames="true">
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_onPressed_pointing_at_null_disables_button" value="ElevatedButton.icon(&#10;      style: ElevatedButton.styleFrom(&#10;          shape: const StadiumBorder(),&#10;          primary: Theme.of(context).colorScheme.secondary),&#10;      label: Text(&#10;        'Order Now',&#10;        style: TextStyle(&#10;          color: Theme.of(context).colorScheme.primary,&#10;        ),&#10;      ),&#10;      icon: Icon(Icons.add_shopping_cart,&#10;          color: Theme.of(context).colorScheme.primary),&#10;          // onPressed DISABLES THE BUTTON WHEN IT'S POITING AT null&#10;      onPressed: (widget.cart.totalAmount &lt;= 0 || _isLoading)&#10;          ? null&#10;          : () async {&#10;              setState(() {&#10;                _isLoading = true;&#10;              });&#10;              await Provider.of&lt;Orders&gt;(context, listen: false).addOrder(&#10;                widget.cart.items.values.toList(),&#10;                widget.cart.totalAmount,&#10;              );&#10;              setState(() {&#10;                _isLoading = false;&#10;              });&#10;              widget.cart.clear();&#10;            },&#10;    );" description="Super interesting feature: onPressed pointing at null disables the button" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_save_dateTime_timestamp_in_db" value="// 'dateTime': timestamp.toIso8601String()," description="How to save DateTime timestamp in a format the allows it to be recreated." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_http_post" value=" try {&#10;  final response = await http.post(Uri.parse($URL$),&#10;      body: json.encode({&#10;        '$KEY$': $VALUE$,&#10;      }));&#10;      print('Response: ${json.decode(response.body)}');&#10;  if (response.statusCode &gt;= 400) {&#10;    &#10;  }&#10;} catch (e) {&#10;  &#10;&#10;  print(e);&#10;}" description="http post with error handling" toReformat="false" toShortenFQNames="true">
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_elevatedButtonWithProgressIndicator_icon_raisedButton" value="ElevatedButton.icon(&#10;&#10;    style: ElevatedButton.styleFrom(&#10;                        shape: const StadiumBorder(),&#10;                        //primary: Theme.of(context).colorScheme.primary&#10;                        primary: Theme.of(context).colorScheme.secondary),&#10;    label: const Text('$TEXT$'),&#10;    icon:  icon: _isLoading&#10;            ? const CircularProgressIndicator()&#10;            : const Icon(Icons.$ICON_NAME$),&#10;                color: Theme.of(context).colorScheme.primary),,&#10;    onPressed: () {},&#10;              ),)," description="Elevated button with progress indicator, replacement for RaisedButton" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ICON_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_http_get" value=" final response = await http.get(Uri.parse($URL$));&#10;print('Response: ${json.decode(response.body)}');&#10;&#10;" description="http get" toReformat="false" toShortenFQNames="true">
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_ex_cascades_.." value="// Use cascades to create a single statement that sets the anInt, aString, and aList properties of a BigObject to 1, 'String!', and [3.0] (respectively) and then calls allDone().&#10;class BigObject {&#10;  int anInt = 0;&#10;  String aString = '';&#10;  List&lt;double&gt; aList = [];&#10;  bool _done = false;&#10;  &#10;  void allDone() {&#10;    _done = true;&#10;  }&#10;}&#10;&#10;// Solution (I got it right!)&#10;BigObject fillBigObject(BigObject obj) {&#10;  // Create a single statement that will update and return obj:&#10;  return obj..anInt = 1&#10;    ..aString = 'String!'&#10;    ..aList = [3.0]&#10;    ..allDone();&#10;}&#10;&#10;" description="To perform a sequence of operations on the same object (ignores the operation's return value)." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_http_as_http" value="import 'package:http/http.dart' as http;&#10;" description="Import http" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_showAlertDialogFunction" value="  void _showErrorDialog(String message) {&#10;    showDialog(&#10;      context: context,&#10;      builder: (ctx) =&gt; AlertDialog(&#10;        title: Text(message),&#10;        actions: [&#10;          TextButton(&#10;            style: TextButton.styleFrom(&#10;              textStyle: const TextStyle(fontSize: 20),&#10;            ),&#10;            onPressed: () {&#10;              Navigator.pop(context);&#10;            },&#10;            child: const Text('OK'),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }" description="Function displays an AlertDialog" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="f_provider_2_register_changeNotifierProxyProvider" value=" ChangeNotifierProxyProvider&lt;$DATA_PROVIDER$, $DATA_CONSUMER$&gt;(&#10;          create: (_) =&gt; $DATA_CONSUMER$($PARAMETERS$),&#10;          update: (ctx, auth, previous$DATA_CONSUMER$) =&gt; $DATA_CONSUMER$($PARAMETERS$),&#10; )," description="Starting point: define a ChangNotifierProxyProvider in main.dart" toReformat="true" toShortenFQNames="true">
    <variable name="DATA_PROVIDER" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA_CONSUMER" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_ex_provider_ChangeNotifierProxyProvider" value="// Auth: data provider&#10;// Products: data consumer&#10;// create: initial object&#10;// update: the updated object&#10;//  ChangeNotifierProxyProvider&lt;Auth, Products&gt;(&#10;//           create: (_) =&gt; Products(authToken: '', myItems: []),&#10;//           update: (ctx, auth, previousProducts) =&gt; Products(&#10;//               authToken: auth.token,&#10;//               myItems:&#10;//                   previousProducts == null ? [] : previousProducts.myItems),&#10;//         ),&#10;&#10;// Larger context:&#10;//  MultiProvider(&#10;//       providers: [&#10;//         ChangeNotifierProvider(create: (_) =&gt; Auth()),&#10;//         ChangeNotifierProxyProvider&lt;Auth, Products&gt;(&#10;//           create: (_) =&gt; Products(authToken: '', myItems: []),&#10;//           update: (ctx, auth, previousProducts) =&gt; Products(&#10;//               authToken: auth.token,&#10;//               myItems:&#10;//                   previousProducts == null ? [] : previousProducts.myItems),&#10;//         ),&#10;//         ChangeNotifierProvider(create: (_) =&gt; Cart()),&#10;//         ChangeNotifierProvider(create: (_) =&gt; Orders()),&#10;//       ],&#10;" description="Example for ChangeNotifierProxyProvider" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_provider_ConsumerVsProviderOf" value="&#10;&#10;// Remember that Provider.of listener rebuild the entire widget after each update.&#10;// Consumer: update a specific widget in the main widget tree&#10;&#10;// Example with Provider.of listener&#10;// under build()&#10;//     final productsData = Provider.of&lt;Products&gt;(context);&#10;//  ... ListView.builder(itemCount: productsData.items.length,&#10;//&#10;// Example with Consumer&#10;// child: Consumer&lt;Products&gt;(&#10;//             builder: (ctx, productsData, _) =&gt;&#10;//                 Padding(&#10;//                   padding: EdgeInsets.all(8),&#10;//                   child: ListView.builder(&#10;//                     itemCount: productsData.items.length,&#10;//                     itemBuilder: (_, index) {&#10;//                       final productItem = productsData.items[index];&#10;//                       return Column(&#10;//                         children: [&#10;//                           UserProductItem(&#10;//                             id: productItem.id!,&#10;//                             title: productItem.title,&#10;//                             imageUrl: productItem.imageUrl,&#10;//                           ),&#10;//                           Divider(),&#10;//                         ],&#10;//                       );&#10;//                     },&#10;//                   ),&#10;//                 ),&#10;//           )," description="Choose between Provider.of listener and Consumer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_futureBuilder_consumer" value="FutureBuilder(&#10;    future: $SOME_CALL_THAT_FINISHES_IN_FUTURE$,&#10;    builder: (ctx, dataSnapshot) {&#10;      if (dataSnapshot.connectionState == ConnectionState.waiting) {&#10;        return const Center(child: CircularProgressIndicator());&#10;      } else {&#10;        if (dataSnapshot.error != null) {&#10;          return const Center(&#10;            child: Text('An error occurred!'),&#10;          );&#10;        } else {&#10;          return Consumer&lt;$CHANGE_NOTIFIER_CLASS$&gt;(&#10;            builder: (ctx, $CHANGE_NOTIFIER_CLASS_LC$Data, child) =&gt; ListView.builder(&#10;              itemBuilder: (context, index) =&gt;&#10;                  $WIDGET_SCREEN_CLASS$(order: $CHANGE_NOTIFIER_CLASS_LC$Data.$LIST$[index]),&#10;              itemCount: $CHANGE_NOTIFIER_CLASS_LC$.$LIST$.length,&#10;            ),&#10;          );&#10;        }&#10;      }&#10;    }),&#10;    &#10;// Example:&#10;// FutureBuilder(&#10;//     future: Provider.of&lt;Orders&gt;(context, listen: false)&#10;//         .fetchAndSetOrders(),&#10;//     builder: (ctx, dataSnapshot) {&#10;//       if (dataSnapshot.connectionState == ConnectionState.waiting) {&#10;//         return const Center(child: CircularProgressIndicator());&#10;//       } else {&#10;//         if (dataSnapshot.error != null) {&#10;//           return const Center(&#10;//             child: Text('An error occurred!'),&#10;//           );&#10;//         } else {&#10;//           return Consumer&lt;Orders&gt;(&#10;//             builder: (ctx, orderData, child) =&gt; ListView.builder(&#10;//               itemBuilder: (context, index) =&gt;&#10;//                   OrderItemWidget(order: orderData.orders[index]),&#10;//               itemCount: orderData.orders.length,&#10;//             ),&#10;//           );&#10;//         }&#10;//       }&#10;//     })" description="Future builder with Consumer" toReformat="false" toShortenFQNames="true">
    <variable name="SOME_CALL_THAT_FINISHES_IN_FUTURE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CHANGE_NOTIFIER_CLASS" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="CHANGE_NOTIFIER_CLASS_LC" expression="decapitalize(CHANGE_NOTIFIER_CLASS)" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET_SCREEN_CLASS" expression="className()" defaultValue="" alwaysStopAt="true" />
    <variable name="LIST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_shared_preferences" value="// Description: Shared preferences&#10;// URL: https://pub.dev/packages/shared_preferences&#10;// Install: flutter pub add shared_preferences&#10;// App: flutter_shop,  src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;&#10;// Example:&#10;&#10;// Full example" description="Shared preferences" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_sharedPrefs_getInstance" value="final prefs = await SharedPreferences.getInstance(); " description="Get a prefs instance" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="funDispose" value="@override&#10;void dispose() {&#10;  $END$&#10;  super.dispose();&#10;}" description="Function to dispose" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="fun_widget_animatedBuider" value=" // Example: flutter_shop&#10; // src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10; AnimatedBuilder(&#10;        //  Use something like: late Animation&lt;Size&gt; _heightAnimation;&#10;        animation: $ANIMATION$,&#10;        builder: (ctx, ch) =&gt; $ANIMATED_WIDGET$(&#10;          child: ch,&#10;        )// Widget to animate whose child is &quot;ch&quot;,&#10;        child: $IGNORED_WIDGETS$// Widget that is not supposed to be animated,&#10;      )" description="AnimatedBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="ANIMATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ANIMATED_WIDGET" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="IGNORED_WIDGETS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_fadeInImage" value="// Example: flutter_shop&#10;//          src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;// placeholder (preferably a local image): AssetImage('assets/image/product-placeholder.png'),&#10;// image: NetworkImage(someUrl)&#10;FadeInImage(&#10;  placeholder: $LOCAL_IMAGE_LOCATION$,&#10;  image: NetworkImage($URL$),&#10;  fit: BoxFit.cover,&#10;)," description="FadeInImage placeholder" toReformat="true" toShortenFQNames="true">
    <variable name="LOCAL_IMAGE_LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_animatedContainer" value="// Example: flutter_shop&#10;//           src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;// final deviceSize = MediaQuery.of(context).size;  &#10;&#10;AnimatedContainer(&#10;  duration: Duration(milliseconds: 300),&#10;  curve: Curves.easeIn,&#10;  height: $HEIGHT$,&#10;  constraints:&#10;      BoxConstraints(minHeight: $MIN_HEIGHT$),&#10;  width: deviceSize.width * 0.75,&#10;  padding: EdgeInsets.all(16.0),&#10;  child: $WIDGET$&#10;)," description="AnimatedContainer" toReformat="true" toShortenFQNames="true">
    <variable name="HEIGHT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MIN_HEIGHT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_text_use_constrainedBox_to_control_its_size" value="ConstrainedBox(&#10;  constraints: const BoxConstraints.expand(),&#10;  child: const Card(child: Text('Hello World!')),&#10;)&#10;// or&#10;ConstrainedBox(&#10;  constraints: const BoxConstraints(&#10;    maxWidth: 200,&#10;    child: const Text(&#10;        'Delicious Candy',&#10;        textAlign: TextAlign.center,&#10;         &#10;        ),&#10;)" description="Use ConstrainedBox to control the text size" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_constrainedBox" value="ConstrainedBox(&#10;  // const BoxConstraints.expand()&#10;  constraints: const BoxConstraints(&#10;    maxWidth: 200,&#10;    child: const Text(&#10;        'Delicious Candy',&#10;        textAlign: TextAlign.center,&#10;         &#10;        ),&#10;)," description="Constrained box (can be used to control the space given to a text widget)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_how_to_hack_non_nullable_strings" value="product.id ?? '${product.id}'" description="One way to assign a nullable String to a non-nullable Object" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_hero" value="// Example: flutter_shop&#10;//          src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;&#10;// Should be applied to the tile (small image) and the expanded image (detail)&#10;// They both share the unique id.&#10;Hero(            &#10;  tag: $UNIQUE_ID$,&#10;  child: $WIDGET$,&#10;),&#10;" description="Hero for animating transitions" toReformat="false" toShortenFQNames="true">
    <variable name="UNIQUE_ID" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_ex_sliverAppBar_customScrollView" value="// Example: flutter_shop&#10;//          src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;import 'package:flutter/material.dart';&#10;&#10;class SliverAppBarScreen extends StatelessWidget {&#10;&#10;  // TODO update Provider live template&#10;  @override&#10;  Widget build(BuildContext context) {&#10;   &#10;    return // Probably need SafeArea()&#10;      Scaffold(&#10;        body: CustomScrollView(slivers: [&#10;          SliverAppBar(&#10;            pinned: true,&#10;            expandedHeight: 150.0,&#10;            flexibleSpace: FlexibleSpaceBar(&#10;              title: Text('Available seats'),&#10;              background: Image.network(&#10;                'https://r-cf.bstatic.com/images/hotel/max1024x768/116/116281457.jpg',&#10;                fit: BoxFit.fitWidth,&#10;              ),&#10;            ),&#10;          ),&#10;          SliverList(&#10;              delegate: SliverChildListDelegate(&#10;                  List.generate(10, (index) =&gt; CustomWidget(index)).toList())),&#10;        ]),&#10;      );&#10;  }&#10;}&#10;&#10;class CustomWidget extends StatelessWidget {&#10;  CustomWidget(this._index) {&#10;    debugPrint('initialize: $_index');&#10;  }&#10;&#10;  final int _index;&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container(&#10;      height: 150,&#10;      color: (_index % 2 != 0) ? Colors.white : Colors.grey,&#10;      child:&#10;      Center(child: Text('index: $_index', style: TextStyle(fontSize: 40))),&#10;    );&#10;  }&#10;}" description="SilverAppBar and CustomScrollView example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_sliverAppBar_customScrollView" value="Scaffold(&#10;     body: CustomScrollView(slivers: [&#10;       SliverAppBar(&#10;         pinned: true,&#10;         expandedHeight: 150.0,&#10;         flexibleSpace: FlexibleSpaceBar(&#10;           title: Text('TITLE'),&#10;           background: Image.network(&#10;             '$IMAGE_URL$,&#10;             fit: BoxFit.fitWidth,&#10;           ),&#10;         ),&#10;       ),&#10;       SliverList(&#10;           delegate: SliverChildListDelegate(&#10;               [$WIDGET_LIST$]&#10;     ]),&#10;);" description="SliverAppBar and CustomScrollView" toReformat="false" toShortenFQNames="true">
    <variable name="IMAGE_URL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET_LIST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_customRoute_customPageTransitionBuilder" value="// Example: flutter_shop&#10;//          src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_shop&#10;&#10;// How to use it in the main file:&#10;//  MaterialApp(&#10;//           title: 'MyShop',&#10;//           theme: ThemeData(&#10;//             pageTransitionsTheme: PageTransitionsTheme(builders: {&#10;//               TargetPlatform.android: CustomPageTransitionBuilder(),&#10;//               TargetPlatform.iOS: CustomPageTransitionBuilder(),&#10;//             }),&#10;&#10;import 'package:flutter/material.dart';&#10;&#10;class CustomRoute&lt;T&gt; extends MaterialPageRoute&lt;T&gt; {&#10;  CustomRoute({required WidgetBuilder builder, RouteSettings? settings})&#10;      : super(builder: builder, settings: settings);&#10;&#10;  @override&#10;  Widget buildTransitions(BuildContext context, Animation&lt;double&gt; animation,&#10;      Animation&lt;double&gt; secondaryAnimation, Widget child) {&#10;    if (settings.name == '/') {&#10;      return child;&#10;    }&#10;    return FadeTransition(&#10;      opacity: animation,&#10;      child: child,&#10;    );&#10;  }&#10;}&#10;&#10;class CustomPageTransitionBuilder extends PageTransitionsBuilder {&#10;  @override&#10;  Widget buildTransitions&lt;T&gt;(&#10;      PageRoute&lt;T&gt; route,&#10;      BuildContext context,&#10;      Animation&lt;double&gt; animation,&#10;      Animation&lt;double&gt; secondaryAnimation,&#10;      Widget child) {&#10;    if (route.settings.name == '/') {&#10;      return child;&#10;    }&#10;    return FadeTransition(&#10;      opacity: animation,&#10;      child: child,&#10;    );&#10;  }&#10;}&#10;" description="Creates a CustomRoute with a nice FadeTransition" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theme_aziz_theme" value="// import 'package:flutter_shop/utils/material_colors.dart';&#10;// Uses MaterialColors which can be generated by clicking on an existing folder or by creating and selecting a new (utils?) folder&#10;// folder -&gt; new -&gt; MaterialColors&#10;&#10;ThemeData(&#10;           &#10;            primarySwatch: greyMaterialColor,&#10;            accentColor: orangeMaterialColor,&#10;            canvasColor: const Color.fromRGBO(255, 254, 229, 1),&#10;            // fontFamily: 'Lato',&#10;            textTheme: ThemeData.light().textTheme.copyWith(&#10;                  bodyText1: const TextStyle(&#10;                    color: Color.fromRGBO(20, 51, 51, 1),&#10;                  ),&#10;                  bodyText2: const TextStyle(&#10;                    color: Color.fromRGBO(20, 51, 51, 1),&#10;                  ),&#10;                ),&#10;          )," description="My own theme for MaterialApp" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_imageFile" value=" Image.file(&#10;        // File _imageFile;&#10;        $IMAGE_FILE$,&#10;        fit: BoxFit.cover,&#10;      )," description="ImageFile widget (Imager from a File)" toReformat="false" toShortenFQNames="true">
    <variable name="IMAGE_FILE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_image_file_image_picker" value="// Description: A Flutter plugin for iOS and Android for picking images from the image library, and taking new pictures with the camera.&#10;// URL: https://pub.dev/packages/image_picker&#10;// Install: flutter pub add image_picker&#10;// App: great_places (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/great_places)&#10;// Config: &#10;//      Android: nothing&#10;//      iOS: add this to info.plist:&#10;//         &lt;key&gt;NSCameraUsageDescription&lt;/key&gt;&#10;// &#9;       &lt;string&gt;We need to take a picture!&lt;/string&gt;&#10;// &#9;       &lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;&#10;// &#9;       &lt;string&gt;We need to take a picture!&lt;/string&gt;         &#10;//      &#10;// Example:&#10;// This example shows how to use 3 packages image_picker + path_provider + path&#10;//  path_provider: A Flutter plugin for finding commonly used locations on the filesystem.&#10;//  path: Provides common operations for manipulating paths joining, splitting, normalizing, etc.&#10;&#10;// File? _storedImage;&#10;// final ImagePicker _picker = ImagePicker();&#10;&#10;// final ImagePicker _picker = ImagePicker();&#10;// // Pick an image&#10;// final XFile? image = await _picker.pickImage(source: ImageSource.gallery);&#10;// // Capture a photo&#10;// final XFile? photo = await _picker.pickImage(source: ImageSource.camera);&#10;// // Pick a video&#10;// final XFile? image = await _picker.pickVideo(source: ImageSource.gallery);&#10;// // Capture a video&#10;// final XFile? video = await _picker.pickVideo(source: ImageSource.camera);&#10;// // Pick multiple images&#10;// final List&lt;XFile&gt;? images = await _picker.pickMultiImage();&#10;&#10;// if (image != null) {&#10;//   File imageFile = File(image.path);&#10;//   setState(() {&#10;//     _storedImage = imageFile;&#10;//   });&#10;//   Directory appDir = await pathProvider.getApplicationDocumentsDirectory();&#10;//   var fileName = path.basename(imageFile.path);&#10;//   final savedImage = await imageFile.copy('${appDir.path}/$fileName');&#10;// }&#10;&#10;// Full example" description="Android and iOS lib for picking/taking images/photos" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_provider" value="import 'package:provider/provider.dart';&#10;&#10;" description="Import provider" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_listViewWithBuilderWithListTile" value="// DON'T FORGET TO SPECIFY THE itemCount!!!!&#10;ListView.builder(&#10;                    itemBuilder: (context, index) {&#10;                      final String $LIST_ITEM$ = $LIST$[index];&#10;                      return ListTile(&#10;                leading: CircleAvatar(&#10;                  child: Text('SomeText'),&#10;                ),&#10;                title: Text('Some Text'),&#10;              );&#10;                    },&#10;                    itemCount: $LIST$.length,&#10;                  )," description="ListView builder + ListTile" toReformat="false" toShortenFQNames="true">
    <variable name="LIST" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LIST_ITEM" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_image_file_path_provider" value="// Description: A Flutter plugin for finding commonly used locations on the filesystem. Supports Android, iOS, Linux, macOS and Windows. Not all methods are supported on all platforms.&#10;// URL: https://pub.dev/packages/path_provider&#10;// Install: flutter pub add path_provider&#10;// App: great_places (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/great_places)&#10;&#10;// Example:&#10;// This example shows how to use 3 packages image_picker + path_provider + path&#10;//  path_provider: A Flutter plugin for finding commonly used locations on the filesystem.&#10;//  path: Provides common operations for manipulating paths joining, splitting, normalizing, etc.&#10;&#10;// File? _storedImage;&#10;// final ImagePicker _picker = ImagePicker();&#10;&#10;// final ImagePicker _picker = ImagePicker();&#10;// // Pick an image&#10;// final XFile? image = await _picker.pickImage(source: ImageSource.gallery);&#10;// // Capture a photo&#10;// final XFile? photo = await _picker.pickImage(source: ImageSource.camera);&#10;// // Pick a video&#10;// final XFile? image = await _picker.pickVideo(source: ImageSource.gallery);&#10;// // Capture a video&#10;// final XFile? video = await _picker.pickVideo(source: ImageSource.camera);&#10;// // Pick multiple images&#10;// final List&lt;XFile&gt;? images = await _picker.pickMultiImage();&#10;&#10;// if (image != null) {&#10;//   File imageFile = File(image.path);&#10;//   setState(() {&#10;//     _storedImage = imageFile;&#10;//   });&#10;//   Directory appDir = await pathProvider.getApplicationDocumentsDirectory();&#10;//   var fileName = path.basename(imageFile.path);&#10;//   final savedImage = await imageFile.copy('${appDir.path}/$fileName');&#10;// }" description="Plugin for finding commonly used locations on the filesystem. Supports Android, iOS, Linux, macOS and Windows." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_image_file_path" value="// Description: A comprehensive, cross-platform path manipulation library for Dart.&#10;//&#10;// The path package provides common operations for manipulating paths: joining, splitting, normalizing, etc.&#10;// URL:https://pub.dev/packages/path&#10;// Install:dart pub add path&#10;// App: great_places (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/great_places)&#10;&#10;// Example:&#10;&#10;// This example shows how to use 3 packages image_picker + path_provider + path&#10;//  path_provider: A Flutter plugin for finding commonly used locations on the filesystem. &#10;//  path: Provides common operations for manipulating paths joining, splitting, normalizing, etc.&#10;&#10;// File? _storedImage;&#10;// final ImagePicker _picker = ImagePicker();&#10;&#10;// final ImagePicker _picker = ImagePicker();&#10;// // Pick an image&#10;// final XFile? image = await _picker.pickImage(source: ImageSource.gallery);&#10;// // Capture a photo&#10;// final XFile? photo = await _picker.pickImage(source: ImageSource.camera);&#10;// // Pick a video&#10;// final XFile? image = await _picker.pickVideo(source: ImageSource.gallery);&#10;// // Capture a video&#10;// final XFile? video = await _picker.pickVideo(source: ImageSource.camera);&#10;// // Pick multiple images&#10;// final List&lt;XFile&gt;? images = await _picker.pickMultiImage();&#10;&#10;// if (image != null) {&#10;//   File imageFile = File(image.path);&#10;//   setState(() {&#10;//     _storedImage = imageFile;&#10;//   });&#10;//   Directory appDir = await pathProvider.getApplicationDocumentsDirectory();&#10;//   var fileName = path.basename(imageFile.path);&#10;//   final savedImage = await imageFile.copy('${appDir.path}/$fileName');&#10;// }&#10;" description="A comprehensive, cross-platform path manipulation library for Dart." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_path" value="import 'package:path/path.dart' as path;&#10;&#10;" description="Import path" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_path_provider" value="import 'package:path_provider/path_provider.dart' as pathProvider;&#10;&#10;" description="Import path_provider" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_sql" value="import 'package:sqflite/sqflite.dart' as sql;&#10;&#10;" description="Import sqflite" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_sqflite" value="// Description: SQLite plugin for Flutter. Supports iOS, Android and MacOS.&#10;// URL: https://pub.dev/packages/sqflite&#10;// Install:flutter pub add sqflite&#10;// App: great_places (/src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/great_places)&#10;&#10;// Full example&#10;// import 'package:great_places/helpers/constants.dart';&#10;// import 'package:path/path.dart' as path;&#10;// import 'package:sqflite/sqflite.dart' as sql;&#10;//&#10;// class DBHelper {&#10;//   static Future&lt;sql.Database&gt; database() async {&#10;//     var dbPath = await sql.getDatabasesPath();&#10;//&#10;//     var placesDbPath = path.join(dbPath, 'places.db');&#10;//&#10;//     return sql.openDatabase(placesDbPath, version: 1, onCreate: (db, version) {&#10;//       return db.execute(&#10;//         'CREATE TABLE $placesTable($id TEXT PRIMARY KEY, $title TEXT, $image TEXT)',&#10;//       );&#10;//     });&#10;//   }&#10;//&#10;//   static Future&lt;void&gt; insert(String table, Map&lt;String, Object&gt; data) async {&#10;//     sql.Database db = await DBHelper.database();&#10;//&#10;//     db.insert(&#10;//       table,&#10;//       data,&#10;//       conflictAlgorithm: sql.ConflictAlgorithm.replace,&#10;//     );&#10;//   }&#10;//&#10;//   static Future&lt;List&lt;Map&lt;String, dynamic&gt;&gt;&gt; getData(String table) async {&#10;//     sql.Database db = await DBHelper.database();&#10;//     return db.query(table);&#10;//   }&#10;// }" description="SQLite plugin for Flutter" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_global_constant_naming_guidelines" value="const String kName = 'name';" description="Global constant should start with K" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_google_maps" value="// Description: A Flutter plugin that provides a Google Maps widget.&#10;// URL: https://pub.dev/packages/google_maps_flutter&#10;// Install:flutter pub add google_maps_flutter&#10;// Console for example: https://console.cloud.google.com/google/maps-apis/api-list?project=flutter-greatplaces-332522&#10;// API: https://developers.google.com/maps/documentation/geocoding/start#reverse&#10;//&#10;// App: great_places (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/great_places)&#10;&#10;// Examples:&#10;// https: //github.com/flutter/plugins/tree/master/packages/google_maps_flutter/google_maps_flutter/example/lib&#10;&#10;// Full example&#10;// import 'dart:convert';&#10;//&#10;// import 'package:http/http.dart' as http;&#10;//&#10;// const google_api_key = 'AIzaSyAMmqlqj9iKJAw_FaIzINGJZyvQQ4f5qf4';&#10;//&#10;// class LocationHelper {&#10;//   static String generateLocationPreviewImage(&#10;//       {required double? latitude, required double? longitude}) {&#10;//     return 'https://maps.googleapis.com/maps/api/staticmap'&#10;//         '?center=$latitude,$longitude&amp;zoom=16&amp;size=600x300&amp;maptype=roadmap'&#10;//         '&amp;markers=color:red%7Clabel:A%7C$latitude,$longitude&amp;key=$google_api_key';&#10;//   }&#10;//&#10;//   static Future&lt;String&gt; getPlaceAddress(double lat, double lng) async {&#10;//     final url =&#10;//         'https://maps.googleapis.com/maps/api/geocode/json?latlng=$lat,$lng&amp;key=$google_api_key';&#10;//     final response = await http.get(Uri.parse(url));&#10;//     var responseBody = json.decode(response.body);&#10;//     print('Response: ${responseBody}');&#10;//     var address = responseBody['results'][0]['formatted_address'];&#10;//     print('address: $address');&#10;//     return address;&#10;//   }&#10;// }" description="A Flutter plugin that provides a Google Maps widget." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_add_app_to_firebase" value="// Android:&#10;//     1) Register app: add the name of the project in the app/src/build.gradle&#10;//     2) Download config file (ignore the Android project part)&#10;//     3) Update (android/build.gradle):  ext.kotlin_version = '1.6.0'&#10;//     4) Update (android/app/build.gradle):  &#10;//         a) defaultConfig {&#10;//                 ... &#10;//                 multiDexEnabled true&#10;//         b) dependencies {&#10;//                 ...&#10;//                 def multidex_version = &quot;2.0.1&quot;&#10;//                 implementation &quot;androidx.multidex:multidex:$multidex_version&quot;&#10;// &#10;// iOS: &#10;//     1) Same as Android but remove any underscore chars&#10;//     2) Download the config file and make sure it's next to info.plist (ios/Runner). &#10;//     3) Adding the &quot;GoogleServices-Info.plist&quot; file via &quot;Add Files&quot; &#10;//        (right click on &quot;Runner&quot; in the left bar and choose &quot;Add Files to 'Runner'&quot;) &#10;//        =&gt; Select the &quot;GoogleServices-Info.plist&quot; file   " description="How to add app to firebase" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_firebase_firestone_streamBuilder_querySnapshot" value="// Add: final _firestore = FirebaseFirestore.instance;&#10;&#10;StreamBuilder(&#10;    stream: _firestore&#10;        .collection('$DB_PATH$')&#10;        .snapshots(),&#10;    builder: (ctx, AsyncSnapshot&lt;QuerySnapshot&gt; snapshot) {&#10;      if(snapshot.connectionState == ConnectionState.waiting) {&#10;          return Center(child: CircularProgressIndicator(),);&#10;      }&#10;      return ListView.builder(&#10;        itemBuilder: (context, index) {&#10;          return Container(&#10;              padding: EdgeInsets.all(8), child: Text('This works'));&#10;        },&#10;        itemCount: snapshot.data!.docs.length,&#10;      );&#10;})" description="StreamBuilder for firestone QuerySnapshot (FiirebaeFirestore)" toReformat="false" toShortenFQNames="true">
    <variable name="DB_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_email" value="TextFormField(&#10;   keyboardType: TextInputType.emailAddress,&#10;   decoration: const InputDecoration(&#10;     labelText: 'Email address',&#10;   ),&#10;),&#10;" description="TextFormField for Email" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_username" value="TextFormField(&#10;  decoration: const InputDecoration(labelText: 'Username'),&#10;),&#10;" description="TextFormField for Username" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_password" value="TextFormField(&#10;  decoration: const InputDecoration(&#10;    labelText: 'Password',&#10;  ),&#10;  obscureText: true,&#10;)," description="TextFormField for Password" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_sizedBox_height" value="const SizedBox(&#10;    height: 12,&#10;)," description="SizedBox with height" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_sizedBox_width" value="const SizedBox(&#10;    width: 12,&#10;)," description="SizedBox with width" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_elevatedButton_basic_styleFrom_raisedButton" value=" ElevatedButton(&#10;   style: ElevatedButton.styleFrom(&#10;     &#10;     // onPrimary: is the background color&#10;     primary: Theme.of(context).colorScheme.primary,&#10;    &#10;     // onPrimary: is the foreground color&#10;     textStyle:&#10;         const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),&#10;   ),&#10;   child: const Text('$TEXT$'),&#10;   onPressed: () {},&#10;)," description="ElevatedButton using styleFrom (without) icon is the replacement for RaisedButton" toReformat="true" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_elevatedButton_buttonStyle_raisedButton" value="ElevatedButton(&#10;    style: ButtonStyle(&#10;      backgroundColor: MaterialStateProperty.all&lt;Color&gt;(&#10;          Theme.of(context).colorScheme.secondary),&#10;      padding:&#10;          MaterialStateProperty.all(const EdgeInsets.all(10)),&#10;      textStyle: MaterialStateProperty.all(&#10;        const TextStyle(&#10;            fontSize: 20, fontWeight: FontWeight.bold),&#10;      ),&#10;    ),&#10;    child: const Text('$TEXT$'),&#10;    onPressed: () {},&#10;)," description="ElevatedButton (without icon with ButtonStyle) is the replacement for RaisedButton" toReformat="true" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_password_with_validator" value="TextFormField(&#10;   validator: (value) {&#10;     if (value != null &amp;&amp; (value.isEmpty || value.length &lt; 7)) {&#10;       return 'Please enter at least 7 characters';&#10;     }&#10;     return null;&#10;   },&#10;  decoration: const InputDecoration(&#10;    labelText: 'Password',&#10;  ),&#10;  obscureText: true,&#10;)," description="TextFormField for Password with a validator" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_username_with_validator" value="TextFormField(&#10;   validator: (value) {&#10;     if (value != null &amp;&amp; (value.isEmpty || value.length &lt; 4)) {&#10;       return 'Please enter at least 4 characters';&#10;     }&#10;     return null;&#10;   },&#10;  decoration: const InputDecoration(labelText: 'Username'),&#10;),&#10;" description="TextFormField for Username with a validator" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_close_soft_keyboard" value="FocusScope.of(context).unfocus();&#10;" description="How to close the soft keyboard" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_snackbar_errorColor" value="ScaffoldMessenger.of(context).showSnackBar(&#10;  SnackBar(&#10;    content: const Text('$MESSAGE$'),&#10;    backgroundColor: Theme.of(context).errorColor,&#10;  ),&#10;);&#10;                    &#10;                    " description="Snackbar with error color" toReformat="false" toShortenFQNames="true">
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_firebase_firestone_streamBuilder_authSateChanges" value="// add final _firebaseAuth = FirebaseAuth.instance;&#10;home: StreamBuilder(&#10;    stream: _firebaseAuth.authStateChanges(),&#10;    builder: (ctx, userSnapshot) {&#10;      if (userSnapshot.hasData) {&#10;        return $SCREEN$;&#10;      }&#10;      return $LOGIN_SCREEN$;&#10;})," description="StreamBuilder for firebase QuerySnapshot (FirebaseAuth)" toReformat="false" toShortenFQNames="true">
    <variable name="SCREEN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOGIN_SCREEN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_firebase_auth_instance" value="import 'package:firebase_auth/firebase_auth.dart';&#10;&#10;final _firebaseAuth = FirebaseAuth.instance;" description="Get a FirebaseAuth instance" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_rules" value="// rules_version = '2';&#10;// service cloud.firestore {&#10;//   match /databases/{database}/documents {&#10;//   &#10;//    Only authenticated users whose uid match can write&#10;//   &#9;match /users/{ui} {&#10;//     &#9;allow write: if request.auth != null &amp;&amp; request.auth.uid == uid;&#10;//     }&#10;//     &#10;//    Only authenticated users can read&#10;//   &#9;match /users/{ui} {&#10;//     &#9;allow read: if request.auth != null;&#10;//     }&#10;//     &#10;//    Only authenticated users can read and create&#10;//     match /chats/{document=**} {&#10;//       allow read, create: if request.auth != null;&#10;//     }&#10;//   }&#10;// }" description="Firebase rules" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_tip_how_to_disable_a_button" value="// IconButton(&#10;//   color: Theme.of(context).primaryColor,&#10;//   icon: const Icon(&#10;//     Icons.send,&#10;//   ),&#10;//   onPressed: someCondition ? null : () {},&#10;// )," description="How to disable a button" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textField" value="TextField(&#10;              decoration: InputDecoration(&#10;                labelText: '$TEXT$',&#10;                hintStyle: TextStyle(&#10;                  color: darkOrange,&#10;                ),&#10;                labelStyle: TextStyle(&#10;                  // ACTUAL color for the label text&#10;                  color: darkOrange,&#10;                ),&#10;                fillColor: darkOrange,&#10;              ),&#10;              onChanged: (value) {&#10;                &#10;              },&#10;            )," description="TextField" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_firebase_firestone_streamBuilder_querySnapshot_reversed" value="// Add: final _firestore = FirebaseFirestore.instance;&#10;&#10;StreamBuilder(&#10;    reverse: true,&#10;    stream: _firestore&#10;        .collection('$DB_PATH$')&#10;        .snapshots(),&#10;    builder: (ctx, AsyncSnapshot&lt;QuerySnapshot&gt; snapshot) {&#10;      if(snapshot.connectionState == ConnectionState.waiting) {&#10;          return Center(child: CircularProgressIndicator(),);&#10;      }&#10;      return ListView.builder(&#10;        itemBuilder: (context, index) {&#10;          return Container(&#10;              padding: EdgeInsets.all(8), child: Text('This works'));&#10;        },&#10;        itemCount: snapshot.data!.docs.length,&#10;      );&#10;})" description="StreamBuilder for firestone QuerySnapshot (FiirebaeFirestore)" toReformat="false" toShortenFQNames="true">
    <variable name="DB_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_firebase_firestone_circularProgressIndicator_waitingState" value="if ($SNAPSHOT$.connectionState == ConnectionState.waiting) {&#10;    return const Center(child: CircularProgressIndicator());&#10;} " description="CircularProgessIndicator while waiting for the data" toReformat="false" toShortenFQNames="true">
    <variable name="SNAPSHOT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_button_textButton_icon_flatButton" value="TextButton.icon(&#10;  style: ElevatedButton.styleFrom(&#10;      // background color&#10;      //primary: Theme.of(context).colorScheme.primary&#10;                            &#10;      // foreground color&#10;      onPrimary: Theme.of(context).colorScheme.secondary),&#10;  label: const Text('$TEXT$'),&#10;  icon: const Icon(Icons.$IMAGE$),&#10;  onPressed: () {},&#10;)," description="Text button with icon, replacement for FlattButton" toReformat="false" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="IMAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_image_pickimage" value="final ImagePicker _picker = ImagePicker();&#10;File? _pickedImage;&#10;&#10;Future&lt;void&gt; _pickImage() async {&#10;  final XFile? image =&#10;  await _picker.pickImage(source: ImageSource.camera, maxWidth: 600);&#10;  if (image != null) {&#10;    setState(() {&#10;      _pickedImage = File(image.path);&#10;    });&#10;  }&#10;}" description="Pick image from Camera" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_error_missingPluginException" value="// Just restart the app" description="MissingPluginException" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_firebase_storage_instance" value="import 'package:firebase_storage/firebase_storage.dart';&#10;final _firebaseStorage = FirebaseStorage.instance;&#10;" description="Get a FirebaseStorage iinstance" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_firebase_messaging_instance" value="import 'package:firebase_messaging/firebase_messaging.dart';&#10;&#10;final _firebaseMessaging = FirebaseMessaging.instance;" description="Get a FirebaseMessaging instance" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_circleAvatar" value="CircleAvatar(&#10;    backgroundColor: Theme.of(context).colorScheme.primary,&#10;    radius: 40,&#10;    // _pickedImage != null ? FileImage(_pickedImage!) : null,&#10;    backgroundImage: $IMAGE$           &#10;)," description="CircleAvatar with an image" toReformat="false" toShortenFQNames="true">
    <variable name="IMAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_firebase_messaging_fbmSubscribe_to_topic" value=" @override&#10;  void initState() {&#10;    super.initState();&#10;    final fbm = FirebaseMessaging.instance;&#10;    fbm.requestPermission();&#10;    FirebaseMessaging.onMessage.listen(&#10;      (RemoteMessage message) {&#10;        RemoteNotification? notification = message.notification;&#10;        AndroidNotification? android = message.notification?.android;&#10;        if (notification != null) {&#10;          print('notification.body: ${notification.body}');&#10;          print('notification.title: ${notification.title}');&#10;        }&#10;        print('message: ${message.data}');&#10;&#10;        print('----- Received Notification');&#10;      }&#10;    );&#10;    fbm.subscribeToTopic('chat');&#10;  }&#10;" description="Subscribe to a topic" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_button_dropDownButton" value="          DropdownButton(&#10;            underline: Container(),&#10;            icon: Icon(&#10;              Icons.more_vert,&#10;              color: Theme.of(context).primaryIconTheme.color,&#10;            ),&#10;            items: [&#10;              DropdownMenuItem(&#10;                child: Container(&#10;                  color: Colors.white,&#10;                  child: Row(&#10;                    children: [&#10;                      Icon(&#10;                        Icons.$ICON_NAME$,&#10;                        color: darkGrey,&#10;                      ),&#10;                      SizedBox(width: 8),&#10;                      Text(&#10;                        '$MENU_ITEM_NAME$',&#10;                        style: TextStyle(&#10;                          color: darkGrey,&#10;                          fontWeight: FontWeight.bold,&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  ),&#10;                ),&#10;                value: '$VALUE$',&#10;              ),&#10;            ],&#10;            onChanged: (itemIdentifier) {&#10;              if (itemIdentifier == '$VALUE$') {&#10;                _firebaseAuth.signOut();&#10;              }&#10;            },&#10;          )" description="DropDownButton" toReformat="false" toShortenFQNames="true">
    <variable name="ICON_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MENU_ITEM_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_button_DropdownMenuItem" value="DropdownMenuItem(&#10;    child: Container(&#10;      color: Colors.white,&#10;      child: Row(&#10;        children: [&#10;          Icon(&#10;            Icons.$ICON_NAME$,&#10;            color: darkGrey,&#10;          ),&#10;          SizedBox(width: 8),&#10;          Text(&#10;            '$MENU_ITEM_NAME$',&#10;            style: TextStyle(&#10;              color: darkGrey,&#10;              fontWeight: FontWeight.bold,&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    ),&#10;    value: '$VALUE$',&#10;)," description="DropDownMenuItem" toReformat="false" toShortenFQNames="true">
    <variable name="ICON_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MENU_ITEM_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_message_bubble" value="import 'package:flutter/material.dart';&#10;&#10;class MessageBubble extends StatelessWidget {&#10;  final String message;&#10;  final bool isMe;&#10;  final String username;&#10;  final String userImage;&#10;  final Key myKey;&#10;&#10;  MessageBubble({&#10;    required this.message,&#10;    required this.isMe,&#10;    required this.myKey,&#10;    required this.username,&#10;    required this.userImage,&#10;  });&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Stack(&#10;      children: [&#10;        Row(&#10;          mainAxisAlignment:&#10;              isMe ? MainAxisAlignment.end : MainAxisAlignment.start,&#10;          children: [&#10;            Container(&#10;              decoration: BoxDecoration(&#10;                color: isMe&#10;                    ? Theme.of(context).colorScheme.primary&#10;                    : Colors.grey[600],&#10;                borderRadius: BorderRadius.only(&#10;                  topLeft: const Radius.circular(12),&#10;                  topRight: const Radius.circular(12),&#10;                  bottomLeft: isMe&#10;                      ? const Radius.circular(12)&#10;                      : const Radius.circular(0),&#10;                  bottomRight: isMe&#10;                      ? const Radius.circular(0)&#10;                      : const Radius.circular(12),&#10;                ),&#10;              ),&#10;              width: 140,&#10;              padding: const EdgeInsets.symmetric(&#10;                vertical: 10,&#10;                horizontal: 16,&#10;              ),&#10;              margin: const EdgeInsets.symmetric(&#10;                vertical: 10,&#10;                horizontal: 8,&#10;              ),&#10;              child: Column(&#10;                children: [&#10;                  // TODO practice by switching back to FutureBuilder&#10;                  if (!isMe)&#10;                    Text(&#10;                      username,&#10;                      style: TextStyle(&#10;                        color: isMe ? Colors.white : Colors.yellowAccent,&#10;                        fontWeight: isMe ? FontWeight.bold : FontWeight.normal,&#10;                      ),&#10;                    ),&#10;                  Text(&#10;                    message,&#10;                    style: TextStyle(&#10;                      color: isMe ? Colors.white : Colors.yellowAccent,&#10;                      fontWeight: isMe ? FontWeight.bold : FontWeight.normal,&#10;                    ),&#10;                  ),&#10;                ],&#10;              ),&#10;            ),&#10;          ],&#10;        ),&#10;        Positioned(&#10;          top: -10,&#10;          left: isMe ? null : 120,&#10;          right: isMe ? 120 : null,&#10;          child: CircleAvatar(&#10;            backgroundImage: NetworkImage(userImage),&#10;          ),&#10;        )&#10;      ],&#10;      clipBehavior: Clip.none,&#10;    );&#10;  }&#10;}&#10;" description="Message bubble" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_cloud_firestore" value="// IMPORTANT: see f_tip_add_app_to_firebase&#10;// Description: A Flutter plugin to use the Cloud Firestore API.&#10;// URL: https://pub.dev/packages/cloud_firestore&#10;// Install: flutter pub add cloud_firestore&#10;// App: flutter_chat_firebase_fcg (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_chat_firebase_fcg)&#10;// App: flash_chat from Dr Angela (/src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-15/flash_chat)&#10;// Example:&#10;// await _firestore.collection(kUsers).doc(uid).set(&#10;//               {kUsername: username, kEmail: email, kImageUrl: downloadURL});" description="Firestore" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_firebase_core" value="// IMPORTANT: used to initialize firebase&#10;// Description: A Flutter plugin to use the Firebase Core API, which enables connecting to multiple Firebase apps.&#10;// URL: https://pub.dev/packages/firebase_core&#10;// Install: flutter pub add firebase_core&#10;// App: flutter_chat_firebase_fcg (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_chat_firebase_fcg)&#10;// App: flash_chat from Dr Angela (/src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-15/flash_chat)&#10;&#10;// Example: Starting the app&#10;// void main() {&#10;//   WidgetsFlutterBinding.ensureInitialized();&#10;//   Firebase.initializeApp().whenComplete(() {&#10;//     print('Firebase is initialized');&#10;//     runApp(const MyApp());&#10;//   });&#10;// }" description="Firebase Core" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_firebase_auth" value="// IMPORTANT: used to authenticate the user and get the user object.&#10;// Description: A Flutter plugin to use the Firebase Authentication API.&#10;// URL: https://pub.dev/packages/firebase_auth&#10;// Install: flutter pub add firebase_auth&#10;// App: flutter_chat_firebase_fcg (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_chat_firebase_fcg)&#10;// App: flash_chat from Dr Angela (/src/mobile/flutter/learning/udemy/complete-flutter-app-development-bootcamp-with-dart/section-15/flash_chat)&#10;&#10;// Example:&#10;// final User? user = _firebaseAuth.currentUser;&#10;//     final userData = await _firestore.collection(kUsers).doc(user!.uid).get();&#10;" description="Firebase Auth" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_firebase_messaging" value="// SEE: f_firebase_messaging_fbmSubscribe_to_topic&#10;// Description: A Flutter plugin to use the Firebase Cloud Messaging API.&#10;// URL: https://pub.dev/packages/firebase_messaging&#10;////&#10;// --&gt; DOC:&#10;//  https://pub.dev/documentation/firebase_messagings/latest/&#10;//  https: //firebase.google.com/docs/functions/firestore-events&#10;////&#10;// --&gt; Github example: https://github.com/FirebaseExtended/flutterfire/tree/master/packages/firebase_messaging/firebase_messaging/example&#10;////&#10;// Install: flutter pub add firebase_messaging&#10;// App: // App: flutter_chat_firebase_fcg (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_chat_firebase_fcg)&#10;&#10;// Example: f_firebase_messaging_fbmSubscribe_to_topic&#10;&#10;// Full example: section 14: https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/&#10;// ChatScreen" description="Firesbase Messaging" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_firebase_storage" value="// URL: https://pub.dev/packages/firebase_storage&#10;// Install: flutter pub add firebase_storage&#10;// App: flutter_chat_firebase_fcg (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/flutter_chat_firebase_fcg)&#10;&#10;// Example:  TaskSnapshot taskSnapshot = await _firebaseStorage&#10;//               .ref()&#10;//               .child(kUserImage)&#10;//               .child('$uid.jpeg')&#10;//               .putFile(image!);&#10;//&#10;//           var downloadURL = await taskSnapshot.ref.getDownloadURL();&#10;//           print('downloadURL: $downloadURL');" description="Firebase Storage" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_firebase_readData" value="final userData = await _firestore.collection('users').doc(user!.uid).get();&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_email_full" value="TextFormField(&#10;  key: const ValueKey('email'),&#10;  autocorrect: false,&#10;  textCapitalization: TextCapitalization.none,&#10;  enableSuggestions: false,&#10;  initialValue: '$INITIAL_VALUE$',&#10;  validator: (value) {&#10;    if (value != null &amp;&amp;&#10;        (value.isEmpty || !value.contains('@'))) {&#10;      return 'Please return a valid email address.';&#10;    }&#10;    return null;&#10;  },&#10;  keyboardType: TextInputType.emailAddress,&#10;  decoration: const InputDecoration(&#10;    labelText: 'Email address',&#10;  ),&#10;  onSaved: (value) {&#10;  },&#10;)" description="TextFormField for Email with most of the properties" toReformat="false" toShortenFQNames="true">
    <variable name="INITIAL_VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_username_full" value=" TextFormField(&#10;   key: const ValueKey('username'),&#10;   initialValue: 'appmath',&#10;   autocorrect: true,&#10;   textCapitalization: TextCapitalization.words,&#10;   enableSuggestions: false,&#10;   validator: (value) {&#10;     if (value != null &amp;&amp;&#10;         (value.isEmpty || value.length &lt; 4)) {&#10;       return 'Please enter at least 4 characters';&#10;     }&#10;     return null;&#10;   },&#10;   decoration: const InputDecoration(labelText: 'Username'),&#10;   onSaved: (value) {&#10;   },&#10; )" description="TextFormField for Username with most of the properties" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textFormField_password_full" value="TextFormField(&#10;  initialValue: 'For Testing',&#10;  key: const ValueKey('password'),&#10;  validator: (value) {&#10;    if (value != null &amp;&amp; (value.isEmpty || value.length &lt; 7)) {&#10;      return 'Please enter at least 7 characters';&#10;    }&#10;    return null;&#10;  },&#10;  decoration: const InputDecoration(&#10;    labelText: 'Password',&#10;  ),&#10;  obscureText: true,&#10;  onSaved: (value) {&#10;  },&#10;)" description="TextFormField for Password with a lot of properties" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_app_deployment_doc" value="https://docs.flutter.dev/deployment/obfuscate&#10;https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/learn/lecture/15229812#overview" description="Documentation for deployment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_button_styleFrom_primaryVsOnPrimary" value="// onPrimary: is the foreground color&#10;// primary: is the background color" description="onPrimary is the foreground color while primary is background color" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_flutter_launcher_icons" value="// Description: A command-line tool which simplifies the task of updating your Flutter app's launcher icon.&#10;// URL: https://pub.dev/packages/flutter_launcher_icons&#10;// Install: might be better to move it to dev_dependencies:&#10;//            flutter pub add flutter_launcher_icons&#10;//    ANDROID: add this&#10;// flutter_icons:&#10;//   android: true&#10;//   ios: true&#10;//   image_path: &quot;dev_assets/places.png&quot;&#10;//   adaptive_icon_background: &quot;#191919&quot;&#10;//   adaptive_icon_foreground: &quot;dev_assets/places-adaptive.png&quot;&#10;&#10;// Running it from the command line:&#10;//    flutter pub run flutter_launcher_icons:main&#10;&#10;// App: great_places (src/mobile/flutter/learning/udemy/flutter-dart-complete-guide/great_places)&#10;&#10;// Example: https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/learn/lecture/15229810#questions" description="A command-line tool which simplifies the task of updating your Flutter app's launcher icon." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_equatable" value="// Description: A Dart package that helps to implement value based equality without needing to explicitly override == and hashCode.&#10;// NOTE: to be used only with immutable classes (all fields are final)&#10;// URL: https://pub.dev/packages/equatable&#10;// Install: flutter pub add equatable OR dart pub add equatable&#10;// App: none&#10;// Full example:&#10;import 'package:equatable/equatable.dart';&#10;&#10;class Point extends Equatable {&#10;  const Point(this.x, this.y);&#10;&#10;  final int x;&#10;  final int y;&#10;&#10;  @override&#10;  bool get stringify =&gt; true;&#10;&#10;  @override&#10;  List&lt;Object?&gt; get props =&gt; [x, y];&#10;}&#10;&#10;// How to use Equitable when a class extends another classs&#10;class SubPoint extends Point implements EquatableMixin {&#10;  const SubPoint(x, y) : super(x, y);&#10;&#10;  @override&#10;  List&lt;Object?&gt; get props =&gt; [x, y];&#10;}&#10;&#10;void main() {&#10;  print(Point(1, 1) == Point(1, 1));&#10;  print(Point(5, 4));&#10;&#10;  print(SubPoint(5, 5));&#10;}&#10;&#10;" description="Simplifies equality comparisons" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_dartx" value="import 'package:dartx/dartx.dart';&#10;&#10;" description="Import dartx" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_todo_baseline" value="// How to use baseline&#10;" description="Research baseline" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_dartx" value="// Description: Superpowers for Dart. Collection of useful static extension methods.&#10;// URL: https://pub.dev/packages/dartx&#10;// Install: flutter pub add dartx OR dart pub add dartx&#10;// Read the README&#10;" description="Dartx for Collections and Strings" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_sample_form_email_validator" value="import 'package:flutter/material.dart';&#10;&#10;void main() =&gt; runApp(const MyApp());&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({Key? key}) : super(key: key);&#10;&#10;  static const String _title = 'Flutter Code Sample';&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      title: _title,&#10;      home: Scaffold(&#10;        appBar: AppBar(title: const Text(_title)),&#10;        body: const MyStatefulWidget(),&#10;      ),&#10;    );&#10;  }&#10;}&#10;&#10;class MyStatefulWidget extends StatefulWidget {&#10;  const MyStatefulWidget({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;MyStatefulWidget&gt; createState() =&gt; _MyStatefulWidgetState();&#10;}&#10;&#10;class _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; {&#10;  final GlobalKey&lt;FormState&gt; _formKey = GlobalKey&lt;FormState&gt;();&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Form(&#10;      key: _formKey,&#10;      child: Column(&#10;        crossAxisAlignment: CrossAxisAlignment.start,&#10;        children: &lt;Widget&gt;[&#10;          TextFormField(&#10;            decoration: const InputDecoration(&#10;              hintText: 'Enter your email',&#10;            ),&#10;            validator: (String? value) {&#10;              if (value == null || value.isEmpty) {&#10;                return 'Please enter some text';&#10;              }&#10;              return null;&#10;            },&#10;          ),&#10;          Padding(&#10;            padding: const EdgeInsets.symmetric(vertical: 16.0),&#10;            child: ElevatedButton(&#10;              onPressed: () {&#10;                // Validate will return true if the form is valid, or false if&#10;                // the form is invalid.&#10;                if (_formKey.currentState!.validate()) {&#10;                  // Process data.&#10;                }&#10;              },&#10;              child: const Text('Submit'),&#10;            ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="Email form sample with validator" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_textField_keyboardType" value="const TextField(&#10;      keyboardType: TextInputType.$TYPE$,&#10;      decoration: InputDecoration(&#10;        hintText: '$HINT_TEXT$',&#10;        labelText: '$LABEL_TEXT$',&#10;      ),&#10;    );" description="Textfield with KeyboardType" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="HINT_TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LABEL_TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_textField_basic" value="const TextField(&#10;      decoration: InputDecoration(&#10;        hintText: '$HINT_TEXT$',&#10;        labelText: '$LABEL_TEXT$',&#10;      ),&#10;    );" description="A very basic TextField" toReformat="false" toShortenFQNames="true">
    <variable name="HINT_TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LABEL_TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_package_rxdart" value="// IMPORTANT: The API docs is on the right hand side (https://pub.dev/documentation/rxdart/latest/)&#10;// Use https://rxmarbles.com/&#10;&#10;// Description: RxDart extends the capabilities of Dart Streams and StreamControllers.&#10;// URL: https://pub.dev/packages/rxdart&#10;// Install:&#10;//        dart pub add rxdart&#10;//        flutter pub add rxdart&#10;// App: login_bloc_grider &#10;//      src/mobile/flutter/learning/udemy/dart-and-flutter-the-complete-devs-guide-grider/login_bloc_grider&#10;" description="RxDart (API Reference is on the right hand side)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_cli_tool" value="// URL: https://medium.com/flutter-community/flutter-cli-52-hidden-samples-fc90f218a9d0&#10;// Contains 52 samples&#10;// Material: 32 examples&#10;// chip: 1 example&#10;// widget: 16 examples&#10;// services: 3 examples" description="CLI tool for samples" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_disable_button" value="// If onPressed and onLongPress callbacks are null, then the button will be disabled.&#10; &#10; onPressed: null," description="How to disable a button" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_debug_layout" value="debugPaintSizeEnabled = true;" description="Trick to debug the layout" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_error_no_mediaquery_widget_ancestor_found" value="// Error: no MediaQuery widget ancestor found.&#10;&#10;// THE APP SHOULD BE launched with MaterialApp (or something similar)&#10;// void main() {&#10;//   runApp(&#10;//     MaterialApp(&#10;//         debugShowCheckedModeBanner: false,&#10;//         title: 'Responsive ',&#10;//         theme: buildThemeData(),&#10;//         home: App()),&#10;//   );&#10;// }&#10;&#10;// There are 2 easy ways of solving this:&#10;// &#10;// Create a new Stateless/Stateful widget and pass it to the home parameter OR&#10;// Use the Builder widget and pass it to the home parameter.&#10;//  @override&#10;//   Widget build(BuildContext context) {&#10;//     return MaterialApp(&#10;//       title: 'App name',&#10;//       home: Builder(builder: (BuildContext context) { &#10;//       ...&#10;//       } )," description="MissingPluginException" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_debug_remove_banner" value="debugShowCheckedModeBanner: false," description="Add it to MaterialApp" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_debug_debugPrint" value="debugPrint($STR$);" description="This is a wrapper around print that throttles the output to a level that avoids being dropped by Android’s kernel." toReformat="false" toShortenFQNames="true">
    <variable name="STR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_debug_log" value="import 'dart:developer' as dev;&#10;&#10;void main() {&#10;  dev.log('log me', name: 'my.app.category');&#10;&#10;  dev.log('log me 1', name: 'my.other.category');&#10;  dev.log('log me 2', name: 'my.other.category');&#10;}" description="This allows you to include a bit more granularity and information in the logging output" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_debug_performance_overlay" value="showPerformanceOverlay: true," description="Add it to MaterialApp" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_positioned_for_stack" value="Positioned()," description="Used inside Stack widget" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_stack_use_clip.none" value="clipBehavior: Clip.none," description="No clip at all" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_transform_rotate" value="Transform.rotate(&#10;      alignment: Alignment.topLeft,&#10;      angle: (pi/2),&#10;      child: Container(&#10;        height: 10,&#10;        width: 125.0,&#10;        color: Colors.red,&#10;      ),&#10;    );" description="Transform widget" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_ex_animation" value="import 'dart:math';&#10;&#10;import 'package:animation_grider/src/widgets/cat.dart';&#10;import 'package:flutter/material.dart';&#10;&#10;class Home extends StatefulWidget {&#10;  @override&#10;  State&lt;Home&gt; createState() =&gt; _HomeState();&#10;}&#10;&#10;class _HomeState extends State&lt;Home&gt; with TickerProviderStateMixin {&#10;  late Animation&lt;double&gt; _catAnimation;&#10;  late AnimationController _catController;&#10;  late Animation&lt;double&gt; _boxAnimation;&#10;  late AnimationController _boxController;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _boxController = AnimationController(&#10;      duration: const Duration(&#10;        milliseconds: 300,&#10;      ),&#10;      vsync: this,&#10;    );&#10;&#10;    // Defines the range of values for our animation to play beTween&#10;    _boxAnimation = Tween(begin: pi * 0.60, end: pi * 0.65,)&#10;        .animate(&#10;      CurvedAnimation(&#10;        parent: _boxController,&#10;        curve: Curves.easeInOut,&#10;      ),&#10;    );&#10;    _boxAnimation.addStatusListener((status) {&#10;      if(status == AnimationStatus.completed) {&#10;          _boxController.reverse();&#10;      } else if (status == AnimationStatus.dismissed) {&#10;        _boxController.forward();&#10;      }&#10;    });&#10;    _boxController.forward();&#10;    /////////////////////////////////&#10;    _catController = AnimationController(&#10;      duration: const Duration(&#10;        milliseconds: 200,&#10;      ),&#10;      vsync: this,&#10;    );&#10;    _catAnimation = Tween(begin: -35.0, end: -80.0,)&#10;        .animate(&#10;      CurvedAnimation(&#10;        parent: _catController,&#10;        curve: Curves.easeIn,&#10;      ),&#10;    );&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return GestureDetector(&#10;      child: Center(&#10;        child: Stack(&#10;          clipBehavior: Clip.none,&#10;          children: [&#10;            buildCatAnimation(),&#10;            buildBox(),&#10;            buildLeftFlap(),&#10;            buildRightFlap()&#10;            // buildRightFlap()&#10;          ],&#10;        ),&#10;      ),&#10;      behavior: HitTestBehavior.translucent,&#10;      onTap: tap,&#10;    );&#10;  }&#10;&#10;  void tap() {&#10;&#10;    if (_catController.isCompleted) {&#10;      _catController.reverse();&#10;      _boxController.forward();&#10;    } else if (_catController.isDismissed) {&#10;      _catController.forward();&#10;      _boxController.stop();&#10;    }&#10;  }&#10;&#10;  Widget buildCatAnimation() {&#10;    return AnimatedBuilder(&#10;      animation: _catAnimation,&#10;      builder: (context, child) {&#10;        return Positioned(&#10;          child: child!,&#10;          top: _catAnimation.value,&#10;          right: 0.0,&#10;          left: 0.0,&#10;        );&#10;      },&#10;      child: Cat(),&#10;    );&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _catController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  Widget buildBox() {&#10;    return Container(&#10;      height: 200.0,&#10;      width: 200.0,&#10;      color: Colors.brown,&#10;    );&#10;  }&#10;&#10;&#10;  Widget buildLeftFlap() {&#10;    return Positioned(&#10;      left: 3.0,&#10;      child: AnimatedBuilder(&#10;          animation: _boxAnimation,&#10;          child: Container(&#10;        height: 10,&#10;        width: 125.0,&#10;        color: Colors.brown,&#10;      ),builder: (context, child) {&#10;         return Transform.rotate(&#10;           child: child,&#10;           alignment: Alignment.topLeft,&#10;           angle: _boxAnimation.value,);&#10;      }),&#10;    );&#10;  }&#10;&#10;  Widget buildRightFlap() {&#10;    return Positioned(&#10;      right: 3.0,&#10;      child: AnimatedBuilder(&#10;        animation: _boxAnimation,&#10;        child: Container(&#10;          height: 10,&#10;          width: 125.0,&#10;          color: Colors.brown,&#10;        ), builder: (context, child) {&#10;          return Transform.rotate(&#10;              child: child,&#10;              alignment: Alignment.topRight,&#10;              angle: -_boxAnimation.value,);&#10;      }),&#10;    );&#10;  }&#10;&#10;  // }&#10;}&#10;" description="Cat animation example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_package_path_provider" value="// Description: A Flutter plugin for finding commonly used locations on the filesystem. Supports Android, iOS, Linux, macOS and Windows. Not all methods are supported on all platforms.&#10;// URL: https://pub.dev/packages/path_provider&#10;// Install: flutter pub add path_provider&#10;// App: flutter_news_gd (Grider: src/mobile/flutter/learning/udemy/dart-and-flutter-the-complete-devs-guide-grider/flutter_news_gd)&#10;" description="A Flutter plugin for finding commonly used locations on the filesystem. Supports Android, iOS, Linux, macOS and Windows. Not all methods are supported on all platforms." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_import_http_show_Client" value="import 'package:http/http.dart' show Client;&#10;" description="Import http.Client class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_uri_parse" value="Uri.parse($URL$)" description="Uri.parse call" toReformat="false" toShortenFQNames="true">
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_t_unit_single" value="test('$NAME$', () {&#10;    $END$&#10;&#10;    expect(1, $EXPECTED$);&#10;  });" description="Unit test" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPECTED" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_t_unit_single1" value="  group('$GROUP_NAME$', () {&#10;    test('$NAME$', () {&#10;      $END$&#10;&#10;      expect(1, $EXPECTED$);&#10;    });&#10;  });" description="Unit test" toReformat="false" toShortenFQNames="true">
    <variable name="GROUP_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPECTED" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_arch_design_widgets_vs_helper_methods" value="// https://www.youtube.com/watch?v=IOyq-eTRhvo&#10;// Prefer widgets:&#10;// 1. Performance&#10;// 2. Testability&#10;// 3. Accuracy&#10;&#10;// 1. Performance: Flutter can precisely target what it re-renders (use const)&#10;// 2. Testability: Decoupled widgets is a lot easier to test&#10;// 3. Accuracy: widgets are less buggy, for example it's almost impossible to&#10;// use the wrong context).&#10;&#10;// Drawbacks of helper methods:&#10;// 1. Unnecessary rebuilds&#10;// 2. Complex widgets&#10;// 3. Stale BuildContext instances&#10;&#10;// Remi Rousselet:&#10;// &quot;Classes have a better default behavior. The only benefit of methods is&#10;// having to write a tiny bit less code. There's no functional benefit.&quot;" description="Widgets vs helper methods" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_tip_arch_design_helper_methods" value="// Consider naming the methods _build.... That makes it clear to readers that they are helper build methods. &#10;// The underscore also ensures that the analyzer warns you if you change the original build method and the helper method becomes unused.&#10;// &#10;// Here's an example:&#10;// &#10;// class A extends StatelessWidget {&#10;//   Widget build(BuildContext context) {&#10;//     return Column(&#10;//       children: [&#10;//         _buildTitle(context),&#10;//         _buildContent(context),&#10;//       ],&#10;//     );&#10;//   }&#10;// &#10;//   Widget _buildTitle(BuildContext context) { ... }&#10;//   Widget _buildContent(BuildContext context) { ... }&#10;// }" description="How to name helper methods" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_widget_futureBuilder_simple" value="    return ListView.builder(&#10;      itemBuilder: (context, index) {&#10;        return FutureBuilder(&#10;          builder: (context, snapshot) {&#10;            return Container(&#10;              height: 80.0,&#10;              child: snapshot.hasData&#10;                  ? Text('I am visible $index')&#10;                  : Text('I have fetched the data yet $index!'),&#10;            );&#10;          },&#10;          future: _getFuture(),&#10;        );&#10;      },&#10;      itemCount: 1000,&#10;    );&#10;  }&#10;&#10;  _getFuture() =&gt; Future.delayed(const Duration(seconds: 2), () =&gt; &quot;hello&quot;);&#10;" description="Future builder" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_progress_circularProgressIndicator" value="const Center(child: CircularProgressIndicator())" description="CircularProgressIndicator" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_widget_streambuilder" value="StreamBuilder(&#10;        stream: $SOURCE$,&#10;        builder: (context, AsyncSnapshot snapshot) {&#10;          if (!snapshot.hasData) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          }&#10;          return &#10;              ListView.builder(&#10;            itemBuilder: (context, index) {&#10;              return Text('${snapshot.data![index]}');&#10;            },&#10;            itemCount: snapshot.data!.length,&#10;          );&#10;        });" description="Simple StreamBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="SOURCE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_example_neomorphism" value="GestureDetector(&#10;              child: AnimatedContainer(&#10;                duration: const Duration(milliseconds: 500),&#10;                curve: Curves.easeIn,&#10;                height: 200,&#10;                width: 200,&#10;                decoration: BoxDecoration(&#10;                  color: mainGrey,&#10;                  borderRadius: BorderRadius.circular(50),&#10;                  boxShadow: _isElevated&#10;                      ? const [&#10;                          BoxShadow(&#10;                            color: Colors.grey,&#10;                            offset: Offset(4, 4),&#10;                            blurRadius: 15,&#10;                            spreadRadius: 1,&#10;                          ),&#10;                          BoxShadow(&#10;                            color: Colors.white,&#10;                            offset: Offset(-4, -4),&#10;                            blurRadius: 15,&#10;                            spreadRadius: 1,&#10;                          ),&#10;                        ]&#10;                      : null,&#10;                ),&#10;              ),&#10;              behavior: HitTestBehavior.opaque,&#10;              onTap: () {&#10;                setState(() {&#10;                  _isElevated = !_isElevated;&#10;                });&#10;              },&#10;            )&#10;// import 'package:flutter/material.dart';&#10;//&#10;// class App extends StatefulWidget {&#10;//   @override&#10;//   State&lt;App&gt; createState() =&gt; _AppState();&#10;// }&#10;//&#10;// class _AppState extends State&lt;App&gt; {&#10;//   final mainGrey = Colors.grey[300];&#10;//   bool _isElevated = true;&#10;//&#10;//   @override&#10;//   Widget build(BuildContext context) {&#10;//     return MaterialApp(&#10;//       debugShowCheckedModeBanner: false,&#10;//       title: 'Neophormism',&#10;//   &#10;//       home: SafeArea(&#10;//         child: Scaffold(&#10;//           backgroundColor: mainGrey,&#10;//           appBar: AppBar(&#10;//             title: const Text('Neophormism'),&#10;//           ),&#10;//           body: Center(&#10;//             child: GestureDetector(&#10;//               child: AnimatedContainer(&#10;//                 duration: const Duration(milliseconds: 500),&#10;//                 curve: Curves.easeIn,&#10;//                 height: 200,&#10;//                 width: 200,&#10;//                 decoration: BoxDecoration(&#10;//                   color: mainGrey,&#10;//                   borderRadius: BorderRadius.circular(50),&#10;//                   boxShadow: _isElevated&#10;//                       ? const [&#10;//                           BoxShadow(&#10;//                             color: Colors.grey,&#10;//                             offset: Offset(4, 4),&#10;//                             blurRadius: 15,&#10;//                             spreadRadius: 1,&#10;//                           ),&#10;//                           BoxShadow(&#10;//                             color: Colors.white,&#10;//                             offset: Offset(-4, -4),&#10;//                             blurRadius: 15,&#10;//                             spreadRadius: 1,&#10;//                           ),&#10;//                         ]&#10;//                       : null,&#10;//                 ),&#10;//               ),&#10;//               behavior: HitTestBehavior.opaque,&#10;//               onTap: () {&#10;//                 setState(() {&#10;//                   _isElevated = !_isElevated;&#10;//                 });&#10;//               },&#10;//             ),&#10;//           ),&#10;//         ),&#10;//       ),&#10;//     );&#10;//   }&#10;// }&#10;            &#10;            " description="Neomorphism" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_intrinsicHeight_row" value="// This class is relatively expensive, because it adds a speculative layout pass before the final &#10;// layout phase. Avoid using it where possible. In the worst case, this widget can result in a layout &#10;// that is O(N²) in the depth of the tree.&#10;&#10;IntrinsicHeight(&#10;              child: Row(&#10;                mainAxisAlignment: MainAxisAlignment.center,&#10;                crossAxisAlignment: CrossAxisAlignment.stretch,&#10;                children: [&#10;                  Container(height: 100, width: 50, color: Colors.blue),&#10;                  Container(height: 250, width: 50, color: Colors.red),&#10;                  Container(height: 150, width: 50, color: Colors.green),&#10;                ],&#10;              ),&#10;            )," description="IntrinsicHeight takes" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_wrap" value="Wrap(&#10;      alignment: WrapAlignment.spaceEvenly,&#10;      direction: Axis.vertical,&#10;      spacing: 32,&#10;      runSpacing: 64,&#10;      children: [&#10;        Container(width: 100, height: 100, color: Colors.red),&#10;        Container(width: 100, height: 100, color: Colors.blue),&#10;        Container(width: 100, height: 100, color: Colors.yellow),&#10;        Container(width: 100, height: 100, color: Colors.green),&#10;        Container(width: 100, height: 100, color: Colors.orange),&#10;      ],&#10;    );" description="Wrap, wraps like a row or column but it wraps when it runs out of room" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_spacer_ignores_mainAxisAlignment" value="  // Spacer has priority over mainAxisAlignment&#10;  Column spacerVsMainAlignment() {&#10;    return Column(&#10;      // this is ignored, better remove it.&#10;      mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;      children: [&#10;        title(),&#10;        Container(height: 120, color: Colors.green),&#10;        Container(height: 120, color: Colors.blue),&#10;        Container(height: 120, color: Colors.red),&#10;        const Spacer(),&#10;      ],&#10;    );&#10;  }" description="Spacer ignores MainAxisAlignment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_layout_spacing_expanded_example" value="Row(&#10;      children: [&#10;        // Tip: Expanded has to be a direct child of a Row or a Column&#10;        Expanded(&#10;          flex: 2,&#10;          child: Container(&#10;            color: Colors.green,&#10;            width: 300,&#10;            height: 200,&#10;            child: Center(child: Text('Expanded')),&#10;          ),&#10;        ),&#10;        Expanded(&#10;          flex: 4,&#10;          child: Container(&#10;            color: Colors.blue,&#10;            width: 300,&#10;            height: 200,&#10;            child: Center(child: Text('Expanded')),&#10;          ),&#10;        )" description="Example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_tip_themData_primaryColor_vs_accentColor" value="// The primaryColor property affects the background color for significant parts&#10;// of the app, including toolbars, tab bars, and app bars.&#10;//&#10;// The accentColor property affects the foreground color for widgets, and also&#10;// refers to the secondary color. The font family, as well as the different &#10;// categories for the textTheme, have all been modified, as seen in the code block above." description="Difference between primary and accent color" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="f_theming_materialApp3_from_seed" value="MaterialApp buildMaterialApp3FromSeed() {&#10;    return MaterialApp(&#10;       title: $TITLE$,&#10;      themeMode: ThemeMode.light,&#10;      theme: ThemeData(&#10;        colorScheme: ColorScheme.fromSeed(&#10;          // seedColor: Colors.green,&#10;          seedColor: greenMaterialColor,&#10;          brightness: Brightness.light,&#10;          // primary: orangeMaterialColor,&#10;          // secondary: greyMaterialColor,&#10;        ),&#10;        useMaterial3: true,&#10;      ),&#10;      darkTheme: ThemeData(&#10;        colorScheme: ColorScheme.fromSeed(&#10;          // seedColor: Colors.greenAccent,&#10;          seedColor: orangeMaterialColor,&#10;          brightness: Brightness.dark,&#10;          // primary: orangeMaterialColor,&#10;          // secondary: greyMaterialColor,&#10;        ),&#10;        useMaterial3: true,&#10;      ),&#10;      home: const $MAIN_SCREEN$,&#10;    );&#10;  }" description="Flutter theming materialApp3 from seed" toReformat="true" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MAIN_SCREEN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theming_themeData_light_dark_from_swatch" value="  ThemeData darkThemeData() {&#10;    return ThemeData(&#10;      colorScheme: ColorScheme.fromSwatch(&#10;        primarySwatch: greyMaterialColor,&#10;        brightness: Brightness.dark,&#10;      ).copyWith(&#10;        secondary: orangeMaterialColor,&#10;      ),&#10;    );&#10;  }&#10;&#10;  ThemeData lightThemeData() {&#10;    return ThemeData(&#10;      colorScheme: ColorScheme.fromSwatch(&#10;        primarySwatch: greyMaterialColor,&#10;      ).copyWith(&#10;        secondary: orangeMaterialColor,&#10;      ),&#10;    );&#10;  }" description="Flutter theming light and dark from swatch" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theming_flex_color_scheme" value="MaterialApp buildMaterialAppFlexColorScheme() {&#10;    return MaterialApp(&#10;      title: 'Flutter Demo',&#10;      // The Mandy red, light theme.&#10;      theme: FlexThemeData.light(scheme: FlexScheme.sanJuanBlue),&#10;      // The Mandy red, dark theme.&#10;      darkTheme: FlexThemeData.dark(scheme: FlexScheme.mandyRed),&#10;      // Use dark or light theme based on system setting.&#10;      themeMode: ThemeMode.light,&#10;      home: const home: $MAIN_SCREEN$,&#10;    );&#10;  }&#10;" description="Flutter theming FlexColorScheme" toReformat="true" toShortenFQNames="true">
    <variable name="MAIN_SCREEN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="f_theming_materialApp3" value="MaterialApp buildMaterialApp3() {&#10;      debugShowCheckedModeBanner: false,&#10;    return MaterialApp(&#10;      title: $TITLE$,&#10;      theme: ThemeData(&#10;        colorSchemeSeed: blueMaterialColor,&#10;        useMaterial3: true,&#10;      ),&#10;      home: $MAIN_SCREEN$,&#10;    );&#10;  }  " description="Flutter theming materialApp3" toReformat="true" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MAIN_SCREEN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>